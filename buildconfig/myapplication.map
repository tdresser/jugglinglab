alternatives.Color -> alternatives.Color:
    int value -> value
    alternatives.Color white -> white
    alternatives.Color lightGray -> lightGray
    alternatives.Color gray -> gray
    alternatives.Color darkGray -> darkGray
    alternatives.Color black -> black
    alternatives.Color red -> red
    alternatives.Color pink -> pink
    alternatives.Color orange -> orange
    alternatives.Color yellow -> yellow
    alternatives.Color green -> green
    alternatives.Color magenta -> magenta
    alternatives.Color cyan -> cyan
    alternatives.Color blue -> blue
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,int) -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.AbstractMessageLite -> a.a.a.a:
    int memoizedHashCode -> a
    void <init>() -> <init>
    com.google.protobuf.ByteString toByteString() -> a
    byte[] toByteArray() -> b
    int getMemoizedSerializedSize() -> c
    void setMemoizedSerializedSize(int) -> a
    int getSerializedSize(com.google.protobuf.Schema) -> a
    void writeToInternal(com.google.protobuf.CodedOutputStream) -> a
    java.lang.String getSerializingExceptionMessage(java.lang.String) -> a
com.google.protobuf.AbstractMessageLite$Builder -> a.a.a.b:
    void <init>() -> <init>
    com.google.protobuf.AbstractMessageLite$Builder clone() -> a
    com.google.protobuf.AbstractMessageLite$Builder internalMergeFrom(com.google.protobuf.AbstractMessageLite) -> a
    java.lang.Object clone() -> clone
    com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.MessageLite) -> a
com.google.protobuf.AbstractParser -> a.a.a.c:
    void <init>() -> <init>
    com.google.protobuf.MessageLite parsePartialFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite) -> b
    java.lang.Object parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.AbstractProtobufList -> a.a.a.d:
    boolean isMutable -> a
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    boolean isModifiable() -> a
    void makeImmutable() -> b
    java.lang.Object remove(int) -> remove
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object set(int,java.lang.Object) -> set
    void ensureIsMutable() -> c
com.google.protobuf.Android -> a.a.a.e:
    java.lang.Class MEMORY_CLASS -> a
    boolean IS_ROBOLECTRIC -> b
    boolean isOnAndroidDevice() -> a
    java.lang.Class getClassForName(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.BooleanArrayList -> a.a.a.f:
    com.google.protobuf.BooleanArrayList EMPTY_LIST -> a
    boolean[] array -> b
    int size -> c
    void <init>() -> <init>
    void <init>(boolean[],int) -> <init>
    void removeRange(int,int) -> removeRange
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int size() -> size
    void addBoolean(boolean) -> a
    void addBoolean(int,boolean) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    void ensureIndexInRange(int) -> b
    java.lang.String makeOutOfBoundsExceptionMessage(int) -> c
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    com.google.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> a
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
com.google.protobuf.ByteOutput -> a.a.a.g:
    void <init>() -> <init>
    void writeLazy(byte[],int,int) -> a
com.google.protobuf.ByteString -> a.a.a.h:
    com.google.protobuf.ByteString EMPTY -> a
    com.google.protobuf.ByteString$ByteArrayCopier byteArrayCopier -> b
    int hash -> c
    void <init>() -> <init>
    byte byteAt(int) -> a
    byte internalByteAt(int) -> b
    com.google.protobuf.ByteString$ByteIterator iterator() -> a
    int size() -> b
    com.google.protobuf.ByteString substring(int,int) -> a
    com.google.protobuf.ByteString copyFrom(byte[],int,int) -> a
    com.google.protobuf.ByteString wrap(byte[]) -> a
    com.google.protobuf.ByteString copyFromUtf8(java.lang.String) -> a
    void writeTo(com.google.protobuf.ByteOutput) -> a
    java.lang.String toStringInternal(java.nio.charset.Charset) -> a
    java.lang.String toStringUtf8() -> c
    boolean isValidUtf8() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.protobuf.CodedInputStream newCodedInput() -> e
    com.google.protobuf.ByteString$CodedBuilder newCodedBuilder(int) -> c
    int peekCachedHashCode() -> f
    int partialHash(int,int,int) -> a
    int checkRange(int,int,int) -> b
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    int access$200(byte) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.ByteString$1 -> a.a.a.i:
    int position -> a
    int limit -> b
    com.google.protobuf.ByteString this$0 -> c
    void <init>(com.google.protobuf.ByteString) -> <init>
    boolean hasNext() -> hasNext
    byte nextByte() -> a
com.google.protobuf.ByteString$2 -> a.a.a.j:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.protobuf.ByteString$AbstractByteIterator -> a.a.a.k:
    void <init>() -> <init>
    void remove() -> remove
    java.lang.Object next() -> next
com.google.protobuf.ByteString$ArraysByteArrayCopier -> a.a.a.l:
    void <init>() -> <init>
    byte[] copyFrom(byte[],int,int) -> a
    void <init>(byte) -> <init>
com.google.protobuf.ByteString$BoundedByteString -> a.a.a.m:
    int bytesOffset -> c
    int bytesLength -> d
    void <init>(byte[],int,int) -> <init>
    byte byteAt(int) -> a
    byte internalByteAt(int) -> b
    int size() -> b
    int getOffsetIntoBytes() -> g
com.google.protobuf.ByteString$ByteArrayCopier -> a.a.a.n:
    byte[] copyFrom(byte[],int,int) -> a
com.google.protobuf.ByteString$ByteIterator -> a.a.a.o:
    byte nextByte() -> a
com.google.protobuf.ByteString$CodedBuilder -> a.a.a.p:
    com.google.protobuf.CodedOutputStream output -> a
    byte[] buffer -> b
    void <init>(int) -> <init>
    com.google.protobuf.ByteString build() -> a
    com.google.protobuf.CodedOutputStream getCodedOutput() -> b
    void <init>(int,byte) -> <init>
com.google.protobuf.ByteString$LeafByteString -> a.a.a.q:
    void <init>() -> <init>
    java.util.Iterator iterator() -> iterator
com.google.protobuf.ByteString$LiteralByteString -> a.a.a.r:
    byte[] bytes -> b
    void <init>(byte[]) -> <init>
    byte byteAt(int) -> a
    byte internalByteAt(int) -> b
    int size() -> b
    com.google.protobuf.ByteString substring(int,int) -> a
    void writeTo(com.google.protobuf.ByteOutput) -> a
    java.lang.String toStringInternal(java.nio.charset.Charset) -> a
    boolean isValidUtf8() -> d
    boolean equals(java.lang.Object) -> equals
    int partialHash(int,int,int) -> a
    com.google.protobuf.CodedInputStream newCodedInput() -> e
    int getOffsetIntoBytes() -> g
com.google.protobuf.ByteString$SystemByteArrayCopier -> a.a.a.s:
    void <init>() -> <init>
    byte[] copyFrom(byte[],int,int) -> a
    void <init>(byte) -> <init>
com.google.protobuf.CodedInputStream -> a.a.a.t:
    int recursionDepth -> a
    int recursionLimit -> b
    com.google.protobuf.CodedInputStreamReader wrapper -> c
    com.google.protobuf.CodedInputStream newInstance(byte[],int,int,boolean) -> a
    void <init>() -> <init>
    int readTag() -> a
    void checkLastTagWas(int) -> a
    boolean skipField(int) -> b
    double readDouble() -> b
    float readFloat() -> c
    long readUInt64() -> d
    long readInt64() -> e
    int readInt32() -> f
    long readFixed64() -> g
    int readFixed32() -> h
    boolean readBool() -> i
    java.lang.String readString() -> j
    java.lang.String readStringRequireUtf8() -> k
    com.google.protobuf.ByteString readBytes() -> l
    int readUInt32() -> m
    int readEnum() -> n
    int readSFixed32() -> o
    long readSFixed64() -> p
    int readSInt32() -> q
    long readSInt64() -> r
    long readRawVarint64SlowPath() -> s
    int pushLimit(int) -> c
    void popLimit(int) -> d
    boolean isAtEnd() -> t
    int getTotalBytesRead() -> u
    int decodeZigZag32(int) -> e
    long decodeZigZag64(long) -> a
    void <init>(byte) -> <init>
com.google.protobuf.CodedInputStream$1 -> a.a.a.u:
    com.google.protobuf.ProtoSyntax getSyntax() -> a
    boolean isMessageSetWireFormat() -> b
    com.google.protobuf.MessageLite getDefaultInstance() -> c
com.google.protobuf.CodedInputStream$ArrayDecoder -> a.a.a.v:
    byte[] buffer -> d
    boolean immutable -> e
    int limit -> f
    int bufferSizeAfterLimit -> g
    int pos -> h
    int startPos -> i
    int lastTag -> j
    int currentLimit -> k
    void <init>(byte[],int,int,boolean) -> <init>
    int readTag() -> a
    void checkLastTagWas(int) -> a
    boolean skipField(int) -> b
    double readDouble() -> b
    float readFloat() -> c
    long readUInt64() -> d
    long readInt64() -> e
    int readInt32() -> f
    long readFixed64() -> g
    int readFixed32() -> h
    boolean readBool() -> i
    java.lang.String readString() -> j
    java.lang.String readStringRequireUtf8() -> k
    com.google.protobuf.ByteString readBytes() -> l
    int readUInt32() -> m
    int readEnum() -> n
    int readSFixed32() -> o
    long readSFixed64() -> p
    int readSInt32() -> q
    long readSInt64() -> r
    int readRawVarint32() -> v
    long readRawVarint64() -> w
    long readRawVarint64SlowPath() -> s
    int readRawLittleEndian32() -> x
    long readRawLittleEndian64() -> y
    int pushLimit(int) -> c
    void recomputeBufferSizeAfterLimit() -> z
    void popLimit(int) -> d
    boolean isAtEnd() -> t
    int getTotalBytesRead() -> u
    byte readRawByte() -> A
    void skipRawBytes(int) -> f
    void <init>(byte[],int,int,boolean,byte) -> <init>
com.google.protobuf.CodedInputStreamReader -> a.a.a.w:
    com.google.protobuf.CodedInputStream input -> a
    int tag -> b
    int endGroupTag -> c
    int nextTag -> d
    com.google.protobuf.CodedInputStreamReader forCodedInput(com.google.protobuf.CodedInputStream) -> a
    void <init>(com.google.protobuf.CodedInputStream) -> <init>
    int getFieldNumber() -> a
    int getTag() -> b
    boolean skipField() -> c
    void requireWireType(int) -> a
    double readDouble() -> d
    float readFloat() -> e
    long readUInt64() -> f
    long readInt64() -> g
    int readInt32() -> h
    long readFixed64() -> i
    int readFixed32() -> j
    boolean readBool() -> k
    java.lang.String readString() -> l
    java.lang.String readStringRequireUtf8() -> m
    java.lang.Object readMessageBySchemaWithCheck(com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> a
    java.lang.Object readGroupBySchemaWithCheck(com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> b
    java.lang.Object readMessage(com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> c
    java.lang.Object readGroup(com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> d
    com.google.protobuf.ByteString readBytes() -> n
    int readUInt32() -> o
    int readEnum() -> p
    int readSFixed32() -> q
    long readSFixed64() -> r
    int readSInt32() -> s
    long readSInt64() -> t
    void readDoubleList(java.util.List) -> a
    void readFloatList(java.util.List) -> b
    void readUInt64List(java.util.List) -> c
    void readInt64List(java.util.List) -> d
    void readInt32List(java.util.List) -> e
    void readFixed64List(java.util.List) -> f
    void readFixed32List(java.util.List) -> g
    void readBoolList(java.util.List) -> h
    void readStringList(java.util.List) -> i
    void readStringListRequireUtf8(java.util.List) -> j
    void readStringListInternal(java.util.List,boolean) -> a
    void readMessageList(java.util.List,com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> a
    void readGroupList(java.util.List,com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> b
    void readBytesList(java.util.List) -> k
    void readUInt32List(java.util.List) -> l
    void readEnumList(java.util.List) -> m
    void readSFixed32List(java.util.List) -> n
    void readSFixed64List(java.util.List) -> o
    void readSInt32List(java.util.List) -> p
    void readSInt64List(java.util.List) -> q
    void verifyPackedFixed64Length(int) -> b
    void readMap(java.util.Map,com.google.protobuf.MapEntryLite$Metadata,com.google.protobuf.ExtensionRegistryLite) -> a
    void verifyPackedFixed32Length(int) -> c
    void requirePosition(int) -> d
com.google.protobuf.CodedOutputStream -> a.a.a.x:
    java.util.logging.Logger logger -> b
    boolean HAS_UNSAFE_ARRAY_OPERATIONS -> c
    com.google.protobuf.CodedOutputStreamWriter wrapper -> a
    com.google.protobuf.CodedOutputStream newInstance(byte[]) -> a
    void <init>() -> <init>
    void writeTag(int,int) -> a
    void writeInt32(int,int) -> b
    void writeUInt32(int,int) -> c
    void writeSInt32(int,int) -> d
    void writeFixed32(int,int) -> e
    void writeUInt64(int,long) -> a
    void writeSInt64(int,long) -> b
    void writeFixed64(int,long) -> c
    void writeFloat(int,float) -> a
    void writeDouble(int,double) -> a
    void writeBool(int,boolean) -> a
    void writeString(int,java.lang.String) -> a
    void writeBytes(int,com.google.protobuf.ByteString) -> a
    void writeMessage(int,com.google.protobuf.MessageLite,com.google.protobuf.Schema) -> a
    void writeMessageSetExtension(int,com.google.protobuf.MessageLite) -> a
    void writeRawMessageSetExtension(int,com.google.protobuf.ByteString) -> b
    void writeInt32NoTag(int) -> a
    void writeUInt32NoTag(int) -> b
    void writeSInt32NoTag(int) -> c
    void writeFixed32NoTag(int) -> d
    void writeUInt64NoTag(long) -> a
    void writeSInt64NoTag(long) -> b
    void writeFixed64NoTag(long) -> c
    void writeFloatNoTag(float) -> a
    void writeDoubleNoTag(double) -> a
    void writeBoolNoTag(boolean) -> a
    void write(byte) -> a
    void writeLazy(byte[],int,int) -> a
    int computeInt32Size(int,int) -> f
    int computeUInt32Size(int,int) -> g
    int computeSInt32Size(int,int) -> h
    int computeFixed32Size(int,int) -> i
    int computeSFixed32Size(int,int) -> j
    int computeInt64Size(int,long) -> d
    int computeUInt64Size(int,long) -> e
    int computeSInt64Size(int,long) -> f
    int computeFixed64Size(int,long) -> g
    int computeSFixed64Size(int,long) -> h
    int computeFloatSize(int,float) -> b
    int computeDoubleSize(int,double) -> b
    int computeBoolSize(int,boolean) -> b
    int computeEnumSize(int,int) -> k
    int computeStringSize(int,java.lang.String) -> b
    int computeBytesSize(int,com.google.protobuf.ByteString) -> c
    int computeLazyFieldSize(int,com.google.protobuf.LazyFieldLite) -> a
    int computeMessageSize(int,com.google.protobuf.MessageLite,com.google.protobuf.Schema) -> b
    int computeMessageSetExtensionSize(int,com.google.protobuf.MessageLite) -> b
    int computeRawMessageSetExtensionSize(int,com.google.protobuf.ByteString) -> d
    int computeLazyFieldMessageSetExtensionSize(int,com.google.protobuf.LazyFieldLite) -> b
    int computeTagSize(int) -> e
    int computeInt32SizeNoTag(int) -> f
    int computeUInt32SizeNoTag(int) -> g
    int computeSInt32SizeNoTag(int) -> h
    int computeFixed32SizeNoTag$134621() -> a
    int computeSFixed32SizeNoTag$134621() -> b
    int computeInt64SizeNoTag(long) -> d
    int computeUInt64SizeNoTag(long) -> e
    int computeSInt64SizeNoTag(long) -> f
    int computeFixed64SizeNoTag$1349e2() -> c
    int computeSFixed64SizeNoTag$1349e2() -> d
    int computeFloatSizeNoTag$133ade() -> e
    int computeDoubleSizeNoTag$13335c() -> f
    int computeBoolSizeNoTag$1385f2() -> g
    int computeEnumSizeNoTag(int) -> i
    int computeStringSizeNoTag(java.lang.String) -> a
    int computeLazyFieldSizeNoTag(com.google.protobuf.LazyFieldLite) -> a
    int computeBytesSizeNoTag(com.google.protobuf.ByteString) -> a
    int computeByteArraySizeNoTag(byte[]) -> b
    int computeMessageSizeNoTag(com.google.protobuf.MessageLite) -> a
    int computeMessageSizeNoTag(com.google.protobuf.MessageLite,com.google.protobuf.Schema) -> a
    int encodeZigZag32(int) -> k
    long encodeZigZag64(long) -> g
    int spaceLeft() -> h
    void checkNoSpaceLeft() -> i
    void inefficientWriteStringNoTag(java.lang.String,com.google.protobuf.Utf8$UnpairedSurrogateException) -> a
    int computeGroupSize(int,com.google.protobuf.MessageLite,com.google.protobuf.Schema) -> c
    int computeGroupSizeNoTag(com.google.protobuf.MessageLite) -> b
    int computeRawVarint32Size(int) -> j
    void <init>(byte) -> <init>
    boolean access$100() -> j
    void <clinit>() -> <clinit>
com.google.protobuf.CodedOutputStream$ArrayEncoder -> a.a.a.y:
    byte[] buffer -> b
    int limit -> c
    int position -> d
    void <init>(byte[],int,int) -> <init>
    void writeTag(int,int) -> a
    void writeInt32(int,int) -> b
    void writeUInt32(int,int) -> c
    void writeFixed32(int,int) -> e
    void writeUInt64(int,long) -> a
    void writeFixed64(int,long) -> c
    void writeBool(int,boolean) -> a
    void writeString(int,java.lang.String) -> a
    void writeBytes(int,com.google.protobuf.ByteString) -> a
    void writeBytesNoTag(com.google.protobuf.ByteString) -> b
    void writeMessage(int,com.google.protobuf.MessageLite,com.google.protobuf.Schema) -> a
    void writeMessageSetExtension(int,com.google.protobuf.MessageLite) -> a
    void writeRawMessageSetExtension(int,com.google.protobuf.ByteString) -> b
    void writeMessageNoTag(com.google.protobuf.MessageLite) -> c
    void write(byte) -> a
    void writeInt32NoTag(int) -> a
    void writeUInt32NoTag(int) -> b
    void writeFixed32NoTag(int) -> d
    void writeUInt64NoTag(long) -> a
    void writeFixed64NoTag(long) -> c
    void write(byte[],int,int) -> b
    void writeLazy(byte[],int,int) -> a
    void writeStringNoTag(java.lang.String) -> b
    int spaceLeft() -> h
com.google.protobuf.CodedOutputStream$OutOfSpaceException -> a.a.a.z:
    void <init>() -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.google.protobuf.CodedOutputStreamWriter -> a.a.a.A:
    com.google.protobuf.CodedOutputStream output -> a
    com.google.protobuf.CodedOutputStreamWriter forCodedOutput(com.google.protobuf.CodedOutputStream) -> a
    void <init>(com.google.protobuf.CodedOutputStream) -> <init>
    com.google.protobuf.Writer$FieldOrder fieldOrder() -> a
    void writeSFixed32(int,int) -> a
    void writeInt64(int,long) -> a
    void writeSFixed64(int,long) -> b
    void writeFloat(int,float) -> a
    void writeDouble(int,double) -> a
    void writeEnum(int,int) -> b
    void writeUInt64(int,long) -> c
    void writeInt32(int,int) -> c
    void writeFixed64(int,long) -> d
    void writeFixed32(int,int) -> d
    void writeBool(int,boolean) -> a
    void writeString(int,java.lang.String) -> a
    void writeBytes(int,com.google.protobuf.ByteString) -> a
    void writeUInt32(int,int) -> e
    void writeSInt32(int,int) -> f
    void writeSInt64(int,long) -> e
    void writeMessage(int,java.lang.Object,com.google.protobuf.Schema) -> a
    void writeGroup(int,java.lang.Object,com.google.protobuf.Schema) -> b
    void writeStartGroup(int) -> a
    void writeEndGroup(int) -> b
    void writeMessageSetItem(int,java.lang.Object) -> a
    void writeInt32List(int,java.util.List,boolean) -> a
    void writeFixed32List(int,java.util.List,boolean) -> b
    void writeInt64List(int,java.util.List,boolean) -> c
    void writeUInt64List(int,java.util.List,boolean) -> d
    void writeFixed64List(int,java.util.List,boolean) -> e
    void writeFloatList(int,java.util.List,boolean) -> f
    void writeDoubleList(int,java.util.List,boolean) -> g
    void writeEnumList(int,java.util.List,boolean) -> h
    void writeBoolList(int,java.util.List,boolean) -> i
    void writeStringList(int,java.util.List) -> a
    void writeBytesList(int,java.util.List) -> b
    void writeUInt32List(int,java.util.List,boolean) -> j
    void writeSFixed32List(int,java.util.List,boolean) -> k
    void writeSFixed64List(int,java.util.List,boolean) -> l
    void writeSInt32List(int,java.util.List,boolean) -> m
    void writeSInt64List(int,java.util.List,boolean) -> n
    void writeMessageList(int,java.util.List,com.google.protobuf.Schema) -> a
    void writeGroupList(int,java.util.List,com.google.protobuf.Schema) -> b
    void writeMap(int,com.google.protobuf.MapEntryLite$Metadata,java.util.Map) -> a
com.google.protobuf.DoubleArrayList -> a.a.a.B:
    com.google.protobuf.DoubleArrayList EMPTY_LIST -> a
    double[] array -> b
    int size -> c
    void <init>() -> <init>
    void <init>(double[],int) -> <init>
    void removeRange(int,int) -> removeRange
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int size() -> size
    void addDouble(double) -> a
    void addDouble(int,double) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    void ensureIndexInRange(int) -> b
    java.lang.String makeOutOfBoundsExceptionMessage(int) -> c
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    com.google.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> a
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
com.google.protobuf.ExtensionLite -> a.a.a.C:
com.google.protobuf.ExtensionRegistryFactory -> a.a.a.D:
    java.lang.Class EXTENSION_REGISTRY_CLASS -> a
    java.lang.Class reflectExtensionRegistry() -> b
    com.google.protobuf.ExtensionRegistryLite createEmpty() -> a
    void <clinit>() -> <clinit>
com.google.protobuf.ExtensionRegistryLite -> a.a.a.E:
    boolean eagerlyParseMessageSets -> b
    com.google.protobuf.ExtensionRegistryLite emptyRegistry -> c
    com.google.protobuf.ExtensionRegistryLite EMPTY_REGISTRY_LITE -> a
    java.util.Map extensionsByNumber -> d
    java.lang.Class resolveExtensionClass() -> b
    com.google.protobuf.ExtensionRegistryLite getEmptyRegistry() -> a
    com.google.protobuf.GeneratedMessageLite$GeneratedExtension findLiteExtensionByNumber(com.google.protobuf.MessageLite,int) -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.ExtensionRegistryLite$ObjectIntPair -> a.a.a.F:
    java.lang.Object object -> a
    int number -> b
    void <init>(java.lang.Object,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.protobuf.ExtensionSchema -> a.a.a.G:
    void <init>() -> <init>
    boolean hasExtensions(com.google.protobuf.MessageLite) -> a
    com.google.protobuf.FieldSet getExtensions(java.lang.Object) -> a
    com.google.protobuf.FieldSet getMutableExtensions(java.lang.Object) -> b
    void makeImmutable(java.lang.Object) -> c
    java.lang.Object parseExtension(com.google.protobuf.Reader,java.lang.Object,com.google.protobuf.ExtensionRegistryLite,com.google.protobuf.FieldSet,java.lang.Object,com.google.protobuf.UnknownFieldSchema) -> a
    int extensionNumber(java.util.Map$Entry) -> a
    void serializeExtension(com.google.protobuf.Writer,java.util.Map$Entry) -> a
    java.lang.Object findExtensionByNumber(com.google.protobuf.ExtensionRegistryLite,com.google.protobuf.MessageLite,int) -> a
    void parseLengthPrefixedMessageSetItem(com.google.protobuf.Reader,java.lang.Object,com.google.protobuf.ExtensionRegistryLite,com.google.protobuf.FieldSet) -> a
    void parseMessageSetItem(com.google.protobuf.ByteString,java.lang.Object,com.google.protobuf.ExtensionRegistryLite,com.google.protobuf.FieldSet) -> a
com.google.protobuf.ExtensionSchemaLite -> a.a.a.H:
    void <init>() -> <init>
    boolean hasExtensions(com.google.protobuf.MessageLite) -> a
    com.google.protobuf.FieldSet getExtensions(java.lang.Object) -> a
    com.google.protobuf.FieldSet getMutableExtensions(java.lang.Object) -> b
    void makeImmutable(java.lang.Object) -> c
    java.lang.Object parseExtension(com.google.protobuf.Reader,java.lang.Object,com.google.protobuf.ExtensionRegistryLite,com.google.protobuf.FieldSet,java.lang.Object,com.google.protobuf.UnknownFieldSchema) -> a
    int extensionNumber(java.util.Map$Entry) -> a
    void serializeExtension(com.google.protobuf.Writer,java.util.Map$Entry) -> a
    java.lang.Object findExtensionByNumber(com.google.protobuf.ExtensionRegistryLite,com.google.protobuf.MessageLite,int) -> a
    void parseLengthPrefixedMessageSetItem(com.google.protobuf.Reader,java.lang.Object,com.google.protobuf.ExtensionRegistryLite,com.google.protobuf.FieldSet) -> a
    void parseMessageSetItem(com.google.protobuf.ByteString,java.lang.Object,com.google.protobuf.ExtensionRegistryLite,com.google.protobuf.FieldSet) -> a
com.google.protobuf.ExtensionSchemas -> a.a.a.I:
    com.google.protobuf.ExtensionSchema LITE_SCHEMA -> a
    com.google.protobuf.ExtensionSchema FULL_SCHEMA -> b
    com.google.protobuf.ExtensionSchema loadSchemaForFullRuntime() -> c
    com.google.protobuf.ExtensionSchema lite() -> a
    com.google.protobuf.ExtensionSchema full() -> b
    void <clinit>() -> <clinit>
com.google.protobuf.FieldSet -> a.a.a.J:
    com.google.protobuf.SmallSortedMap fields -> a
    boolean isImmutable -> b
    boolean hasLazyField -> c
    com.google.protobuf.FieldSet DEFAULT_INSTANCE -> d
    void <init>() -> <init>
    void <init>(byte) -> <init>
    com.google.protobuf.FieldSet emptySet() -> a
    boolean isEmpty() -> b
    void makeImmutable() -> c
    boolean isImmutable() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.protobuf.FieldSet clone() -> e
    java.util.Iterator iterator() -> f
    java.util.Iterator descendingIterator() -> g
    java.lang.Object getField(com.google.protobuf.FieldSet$FieldDescriptorLite) -> a
    void setField(com.google.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> a
    void verifyType(com.google.protobuf.WireFormat$FieldType,java.lang.Object) -> a
    boolean isInitialized() -> h
    boolean isInitialized(java.util.Map$Entry) -> a
    void mergeFrom(com.google.protobuf.FieldSet) -> a
    java.lang.Object cloneIfMutable(java.lang.Object) -> a
    void mergeFromField(java.util.Map$Entry) -> b
    int getSerializedSize() -> i
    int getMessageSetSerializedSize() -> j
    int getMessageSetSerializedSize(java.util.Map$Entry) -> c
    int computeElementSize(com.google.protobuf.WireFormat$FieldType,int,java.lang.Object) -> a
    int computeElementSizeNoTag(com.google.protobuf.WireFormat$FieldType,java.lang.Object) -> b
    int computeFieldSize(com.google.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> b
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
com.google.protobuf.FieldSet$1 -> a.a.a.K:
    int[] $SwitchMap$com$google$protobuf$WireFormat$JavaType -> a
    int[] $SwitchMap$com$google$protobuf$WireFormat$FieldType -> b
    void <clinit>() -> <clinit>
com.google.protobuf.FieldSet$FieldDescriptorLite -> a.a.a.L:
    int getNumber() -> a
    com.google.protobuf.WireFormat$FieldType getLiteType() -> b
    com.google.protobuf.WireFormat$JavaType getLiteJavaType() -> c
    boolean isRepeated() -> d
    boolean isPacked() -> e
    com.google.protobuf.MessageLite$Builder internalMergeFrom(com.google.protobuf.MessageLite$Builder,com.google.protobuf.MessageLite) -> a
com.google.protobuf.FieldType -> a.a.a.M:
    com.google.protobuf.FieldType DOUBLE -> h
    com.google.protobuf.FieldType FLOAT -> i
    com.google.protobuf.FieldType INT64 -> j
    com.google.protobuf.FieldType UINT64 -> k
    com.google.protobuf.FieldType INT32 -> l
    com.google.protobuf.FieldType FIXED64 -> m
    com.google.protobuf.FieldType FIXED32 -> n
    com.google.protobuf.FieldType BOOL -> o
    com.google.protobuf.FieldType STRING -> p
    com.google.protobuf.FieldType MESSAGE -> a
    com.google.protobuf.FieldType BYTES -> q
    com.google.protobuf.FieldType UINT32 -> r
    com.google.protobuf.FieldType ENUM -> s
    com.google.protobuf.FieldType SFIXED32 -> t
    com.google.protobuf.FieldType SFIXED64 -> u
    com.google.protobuf.FieldType SINT32 -> v
    com.google.protobuf.FieldType SINT64 -> w
    com.google.protobuf.FieldType GROUP -> b
    com.google.protobuf.FieldType DOUBLE_LIST -> x
    com.google.protobuf.FieldType FLOAT_LIST -> y
    com.google.protobuf.FieldType INT64_LIST -> z
    com.google.protobuf.FieldType UINT64_LIST -> A
    com.google.protobuf.FieldType INT32_LIST -> B
    com.google.protobuf.FieldType FIXED64_LIST -> C
    com.google.protobuf.FieldType FIXED32_LIST -> D
    com.google.protobuf.FieldType BOOL_LIST -> E
    com.google.protobuf.FieldType STRING_LIST -> F
    com.google.protobuf.FieldType MESSAGE_LIST -> c
    com.google.protobuf.FieldType BYTES_LIST -> G
    com.google.protobuf.FieldType UINT32_LIST -> H
    com.google.protobuf.FieldType ENUM_LIST -> I
    com.google.protobuf.FieldType SFIXED32_LIST -> J
    com.google.protobuf.FieldType SFIXED64_LIST -> K
    com.google.protobuf.FieldType SINT32_LIST -> L
    com.google.protobuf.FieldType SINT64_LIST -> M
    com.google.protobuf.FieldType DOUBLE_LIST_PACKED -> d
    com.google.protobuf.FieldType FLOAT_LIST_PACKED -> N
    com.google.protobuf.FieldType INT64_LIST_PACKED -> O
    com.google.protobuf.FieldType UINT64_LIST_PACKED -> P
    com.google.protobuf.FieldType INT32_LIST_PACKED -> Q
    com.google.protobuf.FieldType FIXED64_LIST_PACKED -> R
    com.google.protobuf.FieldType FIXED32_LIST_PACKED -> S
    com.google.protobuf.FieldType BOOL_LIST_PACKED -> T
    com.google.protobuf.FieldType UINT32_LIST_PACKED -> U
    com.google.protobuf.FieldType ENUM_LIST_PACKED -> V
    com.google.protobuf.FieldType SFIXED32_LIST_PACKED -> W
    com.google.protobuf.FieldType SFIXED64_LIST_PACKED -> X
    com.google.protobuf.FieldType SINT32_LIST_PACKED -> Y
    com.google.protobuf.FieldType SINT64_LIST_PACKED -> e
    com.google.protobuf.FieldType GROUP_LIST -> f
    com.google.protobuf.FieldType MAP -> g
    int id -> Z
    com.google.protobuf.FieldType$Collection collection -> aa
    com.google.protobuf.FieldType[] VALUES -> ab
    com.google.protobuf.FieldType[] $VALUES -> ac
    com.google.protobuf.FieldType[] values() -> a
    void <init>(java.lang.String,int,int,com.google.protobuf.FieldType$Collection,com.google.protobuf.JavaType) -> <init>
    int id() -> b
    void <clinit>() -> <clinit>
com.google.protobuf.FieldType$1 -> a.a.a.N:
    int[] $SwitchMap$com$google$protobuf$FieldType$Collection -> a
    int[] $SwitchMap$com$google$protobuf$JavaType -> b
    void <clinit>() -> <clinit>
com.google.protobuf.FieldType$Collection -> a.a.a.O:
    com.google.protobuf.FieldType$Collection SCALAR -> a
    com.google.protobuf.FieldType$Collection VECTOR -> b
    com.google.protobuf.FieldType$Collection PACKED_VECTOR -> c
    com.google.protobuf.FieldType$Collection MAP -> d
    boolean isList -> e
    com.google.protobuf.FieldType$Collection[] $VALUES -> f
    com.google.protobuf.FieldType$Collection[] values() -> a
    void <init>(java.lang.String,int,boolean) -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.FloatArrayList -> a.a.a.P:
    com.google.protobuf.FloatArrayList EMPTY_LIST -> a
    float[] array -> b
    int size -> c
    void <init>() -> <init>
    void <init>(float[],int) -> <init>
    void removeRange(int,int) -> removeRange
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int size() -> size
    void addFloat(float) -> a
    void addFloat(int,float) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    void ensureIndexInRange(int) -> b
    java.lang.String makeOutOfBoundsExceptionMessage(int) -> c
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    com.google.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> a
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
com.google.protobuf.GeneratedMessageInfoFactory -> a.a.a.Q:
    com.google.protobuf.GeneratedMessageInfoFactory instance -> a
    void <init>() -> <init>
    com.google.protobuf.GeneratedMessageInfoFactory getInstance() -> a
    boolean isSupported(java.lang.Class) -> a
    com.google.protobuf.MessageInfo messageInfoFor(java.lang.Class) -> b
    void <clinit>() -> <clinit>
com.google.protobuf.GeneratedMessageLite -> a.a.a.R:
    com.google.protobuf.UnknownFieldSetLite unknownFields -> b
    int memoizedSerializedSize -> c
    java.util.Map defaultInstanceMap -> d
    void <init>() -> <init>
    com.google.protobuf.Parser getParserForType() -> d
    com.google.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> o
    com.google.protobuf.GeneratedMessageLite$Builder newBuilderForType() -> e
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void makeImmutable() -> f
    com.google.protobuf.GeneratedMessageLite$Builder createBuilder() -> g
    boolean isInitialized() -> h
    java.lang.Object dynamicMethod$1f92504(com.google.protobuf.GeneratedMessageLite$MethodToInvoke) -> a
    java.lang.Object dynamicMethod(com.google.protobuf.GeneratedMessageLite$MethodToInvoke) -> b
    int getMemoizedSerializedSize() -> c
    void setMemoizedSerializedSize(int) -> a
    void writeTo(com.google.protobuf.CodedOutputStream) -> b
    int getSerializedSize() -> i
    java.lang.Object buildMessageInfo() -> j
    com.google.protobuf.GeneratedMessageLite getDefaultInstance(java.lang.Class) -> a
    void registerDefaultInstance(java.lang.Class,com.google.protobuf.GeneratedMessageLite) -> a
    java.lang.Object newMessageInfo(com.google.protobuf.MessageLite,java.lang.String,java.lang.Object[]) -> a
    java.lang.Object invokeOrDie(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> a
    boolean isInitialized(com.google.protobuf.GeneratedMessageLite,boolean) -> a
    com.google.protobuf.Internal$ProtobufList emptyProtobufList() -> k
    com.google.protobuf.GeneratedMessageLite parsePartialFrom(com.google.protobuf.GeneratedMessageLite,com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> a
    com.google.protobuf.MessageLite$Builder toBuilder() -> l
    com.google.protobuf.MessageLite$Builder newBuilderForType() -> m
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> n
    void <clinit>() -> <clinit>
com.google.protobuf.GeneratedMessageLite$Builder -> a.a.a.S:
    com.google.protobuf.GeneratedMessageLite defaultInstance -> b
    com.google.protobuf.GeneratedMessageLite instance -> a
    boolean isBuilt -> c
    void <init>(com.google.protobuf.GeneratedMessageLite) -> <init>
    void copyOnWrite() -> b
    boolean isInitialized() -> h
    com.google.protobuf.GeneratedMessageLite$Builder clone() -> f
    com.google.protobuf.GeneratedMessageLite buildPartial() -> g
    com.google.protobuf.GeneratedMessageLite build() -> c
    com.google.protobuf.GeneratedMessageLite$Builder mergeFrom(com.google.protobuf.GeneratedMessageLite) -> a
    void mergeFromInstance(com.google.protobuf.GeneratedMessageLite,com.google.protobuf.GeneratedMessageLite) -> a
    com.google.protobuf.AbstractMessageLite$Builder internalMergeFrom(com.google.protobuf.AbstractMessageLite) -> a
    com.google.protobuf.AbstractMessageLite$Builder clone() -> a
    com.google.protobuf.MessageLite buildPartial() -> d
    com.google.protobuf.MessageLite build() -> e
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> n
    java.lang.Object clone() -> clone
com.google.protobuf.GeneratedMessageLite$DefaultInstanceBasedParser -> a.a.a.T:
    com.google.protobuf.GeneratedMessageLite defaultInstance -> a
    void <init>(com.google.protobuf.GeneratedMessageLite) -> <init>
    java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> a
com.google.protobuf.GeneratedMessageLite$ExtendableMessage -> a.a.a.U:
    com.google.protobuf.FieldSet extensions -> c
    void <init>() -> <init>
    com.google.protobuf.FieldSet ensureExtensionsAreMutable() -> o
com.google.protobuf.GeneratedMessageLite$ExtendableMessageOrBuilder -> a.a.a.V:
com.google.protobuf.GeneratedMessageLite$ExtensionDescriptor -> a.a.a.W:
    int getNumber() -> a
    com.google.protobuf.WireFormat$FieldType getLiteType() -> b
    com.google.protobuf.WireFormat$JavaType getLiteJavaType() -> c
    boolean isRepeated() -> d
    boolean isPacked() -> e
    com.google.protobuf.MessageLite$Builder internalMergeFrom(com.google.protobuf.MessageLite$Builder,com.google.protobuf.MessageLite) -> a
    int compareTo(java.lang.Object) -> compareTo
com.google.protobuf.GeneratedMessageLite$GeneratedExtension -> a.a.a.X:
com.google.protobuf.GeneratedMessageLite$MethodToInvoke -> a.a.a.Y:
    com.google.protobuf.GeneratedMessageLite$MethodToInvoke GET_MEMOIZED_IS_INITIALIZED -> a
    com.google.protobuf.GeneratedMessageLite$MethodToInvoke SET_MEMOIZED_IS_INITIALIZED -> b
    com.google.protobuf.GeneratedMessageLite$MethodToInvoke BUILD_MESSAGE_INFO -> c
    com.google.protobuf.GeneratedMessageLite$MethodToInvoke NEW_MUTABLE_INSTANCE -> d
    com.google.protobuf.GeneratedMessageLite$MethodToInvoke NEW_BUILDER -> e
    com.google.protobuf.GeneratedMessageLite$MethodToInvoke GET_DEFAULT_INSTANCE -> f
    com.google.protobuf.GeneratedMessageLite$MethodToInvoke GET_PARSER -> g
    com.google.protobuf.GeneratedMessageLite$MethodToInvoke[] $VALUES -> h
    com.google.protobuf.GeneratedMessageLite$MethodToInvoke[] values() -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.IntArrayList -> a.a.a.Z:
    com.google.protobuf.IntArrayList EMPTY_LIST -> a
    int[] array -> b
    int size -> c
    void <init>() -> <init>
    void <init>(int[],int) -> <init>
    void removeRange(int,int) -> removeRange
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int getInt(int) -> b
    int size() -> size
    void addInt(int) -> c
    void addInt(int,int) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    void ensureIndexInRange(int) -> d
    java.lang.String makeOutOfBoundsExceptionMessage(int) -> e
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    com.google.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> a
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
com.google.protobuf.Internal -> a.a.a.aa:
    java.nio.charset.Charset UTF_8 -> a
    byte[] EMPTY_BYTE_ARRAY -> b
    java.lang.Object checkNotNull(java.lang.Object) -> a
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String) -> a
    boolean isValidUtf8(byte[]) -> a
    java.lang.String toStringUtf8(byte[]) -> b
    int hashLong(long) -> a
    int hashBoolean(boolean) -> a
    int hashCode(byte[]) -> c
    int partialHash(int,byte[],int,int) -> a
    java.lang.Object mergeMessage(java.lang.Object,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.Internal$BooleanList -> a.a.a.ab:
com.google.protobuf.Internal$DoubleList -> a.a.a.ac:
com.google.protobuf.Internal$EnumLite -> a.a.a.ad:
    int getNumber() -> a
com.google.protobuf.Internal$EnumVerifier -> a.a.a.ae:
    boolean isInRange$134632() -> a
com.google.protobuf.Internal$FloatList -> a.a.a.af:
com.google.protobuf.Internal$IntList -> a.a.a.ag:
com.google.protobuf.Internal$LongList -> a.a.a.ah:
com.google.protobuf.Internal$ProtobufList -> a.a.a.ai:
    void makeImmutable() -> b
    boolean isModifiable() -> a
    com.google.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> a
com.google.protobuf.InvalidProtocolBufferException -> a.a.a.aj:
    void <init>(java.lang.String) -> <init>
    com.google.protobuf.InvalidProtocolBufferException truncatedMessage() -> a
    com.google.protobuf.InvalidProtocolBufferException negativeSize() -> b
    com.google.protobuf.InvalidProtocolBufferException malformedVarint() -> c
    com.google.protobuf.InvalidProtocolBufferException invalidTag() -> d
    com.google.protobuf.InvalidProtocolBufferException invalidEndTag() -> e
    com.google.protobuf.InvalidProtocolBufferException$InvalidWireTypeException invalidWireType() -> f
    com.google.protobuf.InvalidProtocolBufferException recursionLimitExceeded() -> g
    com.google.protobuf.InvalidProtocolBufferException parseFailure() -> h
    com.google.protobuf.InvalidProtocolBufferException invalidUtf8() -> i
com.google.protobuf.InvalidProtocolBufferException$InvalidWireTypeException -> a.a.a.ak:
    void <init>(java.lang.String) -> <init>
com.google.protobuf.JavaType -> a.a.a.al:
    com.google.protobuf.JavaType VOID -> a
    com.google.protobuf.JavaType INT -> b
    com.google.protobuf.JavaType LONG -> c
    com.google.protobuf.JavaType FLOAT -> d
    com.google.protobuf.JavaType DOUBLE -> e
    com.google.protobuf.JavaType BOOLEAN -> f
    com.google.protobuf.JavaType STRING -> g
    com.google.protobuf.JavaType BYTE_STRING -> h
    com.google.protobuf.JavaType ENUM -> i
    com.google.protobuf.JavaType MESSAGE -> j
    java.lang.Class boxedType -> k
    com.google.protobuf.JavaType[] $VALUES -> l
    com.google.protobuf.JavaType[] values() -> a
    void <init>(java.lang.String,int,java.lang.Class,java.lang.Class,java.lang.Object) -> <init>
    java.lang.Class getBoxedType() -> b
    void <clinit>() -> <clinit>
com.google.protobuf.LazyField -> a.a.a.am:
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.protobuf.LazyField$LazyEntry -> a.a.a.an:
    java.util.Map$Entry entry -> a
    void <init>(java.util.Map$Entry) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    com.google.protobuf.LazyField getField() -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    void <init>(java.util.Map$Entry,byte) -> <init>
com.google.protobuf.LazyField$LazyIterator -> a.a.a.ao:
    java.util.Iterator iterator -> a
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
com.google.protobuf.LazyFieldLite -> a.a.a.ap:
    com.google.protobuf.ByteString delayedBytes -> a
    com.google.protobuf.ExtensionRegistryLite extensionRegistry -> b
    com.google.protobuf.MessageLite value -> c
    com.google.protobuf.ByteString memoizedBytes -> d
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.protobuf.MessageLite getValue(com.google.protobuf.MessageLite) -> a
    com.google.protobuf.MessageLite setValue(com.google.protobuf.MessageLite) -> b
    int getSerializedSize() -> a
    com.google.protobuf.ByteString toByteString() -> b
    void ensureInitialized(com.google.protobuf.MessageLite) -> c
    void <clinit>() -> <clinit>
com.google.protobuf.LazyStringArrayList -> a.a.a.aq:
    com.google.protobuf.LazyStringArrayList EMPTY_LIST -> a
    java.util.List list -> b
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(java.util.ArrayList) -> <init>
    int size() -> size
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    void add(com.google.protobuf.ByteString) -> a
    java.lang.Object getRaw(int) -> b
    java.lang.String asString(java.lang.Object) -> a
    java.util.List getUnderlyingElements() -> d
    com.google.protobuf.LazyStringList getUnmodifiableView() -> e
    java.lang.Object set(int,java.lang.Object) -> set
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean remove(java.lang.Object) -> remove
    java.lang.Object remove(int) -> remove
    boolean isModifiable() -> a
    void add(int,java.lang.Object) -> add
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    com.google.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> a
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
com.google.protobuf.LazyStringList -> a.a.a.ar:
    java.lang.Object getRaw(int) -> b
    void add(com.google.protobuf.ByteString) -> a
    java.util.List getUnderlyingElements() -> d
    com.google.protobuf.LazyStringList getUnmodifiableView() -> e
com.google.protobuf.ListFieldSchema -> a.a.a.as:
    com.google.protobuf.ListFieldSchema FULL_INSTANCE -> a
    com.google.protobuf.ListFieldSchema LITE_INSTANCE -> b
    void <init>() -> <init>
    java.util.List mutableListAt(java.lang.Object,long) -> a
    void makeImmutableListAt(java.lang.Object,long) -> b
    void mergeListsAt(java.lang.Object,java.lang.Object,long) -> a
    com.google.protobuf.ListFieldSchema full() -> a
    com.google.protobuf.ListFieldSchema lite() -> b
    void <init>(byte) -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.ListFieldSchema$ListFieldSchemaFull -> a.a.a.at:
    java.lang.Class UNMODIFIABLE_LIST_CLASS -> a
    void <init>() -> <init>
    java.util.List mutableListAt(java.lang.Object,long) -> a
    void makeImmutableListAt(java.lang.Object,long) -> b
    java.util.List mutableListAt(java.lang.Object,long,int) -> a
    void mergeListsAt(java.lang.Object,java.lang.Object,long) -> a
    java.util.List getList(java.lang.Object,long) -> c
    void <init>(byte) -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.ListFieldSchema$ListFieldSchemaLite -> a.a.a.au:
    void <init>() -> <init>
    java.util.List mutableListAt(java.lang.Object,long) -> a
    void makeImmutableListAt(java.lang.Object,long) -> b
    void mergeListsAt(java.lang.Object,java.lang.Object,long) -> a
    com.google.protobuf.Internal$ProtobufList getProtobufList(java.lang.Object,long) -> c
    void <init>(byte) -> <init>
com.google.protobuf.LongArrayList -> a.a.a.av:
    com.google.protobuf.LongArrayList EMPTY_LIST -> a
    long[] array -> b
    int size -> c
    void <init>() -> <init>
    void <init>(long[],int) -> <init>
    void removeRange(int,int) -> removeRange
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long getLong(int) -> b
    int size() -> size
    void addLong(long) -> a
    void addLong(int,long) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    void ensureIndexInRange(int) -> c
    java.lang.String makeOutOfBoundsExceptionMessage(int) -> d
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    com.google.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> a
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
com.google.protobuf.ManifestSchemaFactory -> a.a.a.aw:
    com.google.protobuf.MessageInfoFactory messageInfoFactory -> a
    com.google.protobuf.MessageInfoFactory EMPTY_FACTORY -> b
    void <init>() -> <init>
    void <init>(com.google.protobuf.MessageInfoFactory) -> <init>
    com.google.protobuf.Schema createSchema(java.lang.Class) -> a
    boolean isProto2(com.google.protobuf.MessageInfo) -> a
    com.google.protobuf.MessageInfoFactory getDescriptorMessageInfoFactory() -> a
    void <clinit>() -> <clinit>
com.google.protobuf.ManifestSchemaFactory$1 -> a.a.a.ax:
    void <init>() -> <init>
    boolean isSupported(java.lang.Class) -> a
    com.google.protobuf.MessageInfo messageInfoFor(java.lang.Class) -> b
com.google.protobuf.ManifestSchemaFactory$CompositeMessageInfoFactory -> a.a.a.ay:
    com.google.protobuf.MessageInfoFactory[] factories -> a
    void <init>(com.google.protobuf.MessageInfoFactory[]) -> <init>
    boolean isSupported(java.lang.Class) -> a
    com.google.protobuf.MessageInfo messageInfoFor(java.lang.Class) -> b
com.google.protobuf.MapEntryLite -> a.a.a.az:
    void writeTo(com.google.protobuf.CodedOutputStream,com.google.protobuf.MapEntryLite$Metadata,java.lang.Object,java.lang.Object) -> a
    int computeSerializedSize(com.google.protobuf.MapEntryLite$Metadata,java.lang.Object,java.lang.Object) -> a
com.google.protobuf.MapEntryLite$Metadata -> a.a.a.aA:
com.google.protobuf.MapFieldLite -> a.a.a.aB:
    boolean isMutable -> a
    com.google.protobuf.MapFieldLite EMPTY_MAP_FIELD -> b
    void <init>() -> <init>
    void <init>(java.util.Map) -> <init>
    com.google.protobuf.MapFieldLite emptyMapField() -> a
    void mergeFrom(com.google.protobuf.MapFieldLite) -> a
    java.util.Set entrySet() -> entrySet
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean equals(java.lang.Object) -> equals
    int calculateHashCodeForObject(java.lang.Object) -> a
    int hashCode() -> hashCode
    com.google.protobuf.MapFieldLite mutableCopy() -> b
    void makeImmutable() -> c
    boolean isMutable() -> d
    void ensureMutable() -> e
    void <clinit>() -> <clinit>
com.google.protobuf.MapFieldSchema -> a.a.a.aC:
    java.util.Map forMutableMapData(java.lang.Object) -> a
    java.util.Map forMapData(java.lang.Object) -> b
    boolean isImmutable(java.lang.Object) -> c
    java.lang.Object toImmutable(java.lang.Object) -> d
    java.lang.Object newMapField$7713a341() -> a
    com.google.protobuf.MapEntryLite$Metadata forMapMetadata(java.lang.Object) -> e
    java.lang.Object mergeFrom(java.lang.Object,java.lang.Object) -> a
    int getSerializedSize(int,java.lang.Object,java.lang.Object) -> a
com.google.protobuf.MapFieldSchemaLite -> a.a.a.aD:
    void <init>() -> <init>
    java.util.Map forMutableMapData(java.lang.Object) -> a
    com.google.protobuf.MapEntryLite$Metadata forMapMetadata(java.lang.Object) -> e
    java.util.Map forMapData(java.lang.Object) -> b
    boolean isImmutable(java.lang.Object) -> c
    java.lang.Object toImmutable(java.lang.Object) -> d
    java.lang.Object newMapField$7713a341() -> a
    java.lang.Object mergeFrom(java.lang.Object,java.lang.Object) -> a
    int getSerializedSize(int,java.lang.Object,java.lang.Object) -> a
com.google.protobuf.MapFieldSchemas -> a.a.a.aE:
    com.google.protobuf.MapFieldSchema FULL_SCHEMA -> a
    com.google.protobuf.MapFieldSchema LITE_SCHEMA -> b
    com.google.protobuf.MapFieldSchema full() -> a
    com.google.protobuf.MapFieldSchema lite() -> b
    com.google.protobuf.MapFieldSchema loadSchemaForFullRuntime() -> c
    void <clinit>() -> <clinit>
com.google.protobuf.MessageInfo -> a.a.a.aF:
    com.google.protobuf.ProtoSyntax getSyntax() -> a
    boolean isMessageSetWireFormat() -> b
    com.google.protobuf.MessageLite getDefaultInstance() -> c
com.google.protobuf.MessageInfoFactory -> a.a.a.aG:
    boolean isSupported(java.lang.Class) -> a
    com.google.protobuf.MessageInfo messageInfoFor(java.lang.Class) -> b
com.google.protobuf.MessageLite -> a.a.a.aH:
    void writeTo(com.google.protobuf.CodedOutputStream) -> b
    int getSerializedSize() -> i
    com.google.protobuf.Parser getParserForType() -> d
    com.google.protobuf.ByteString toByteString() -> a
    com.google.protobuf.MessageLite$Builder newBuilderForType() -> m
    com.google.protobuf.MessageLite$Builder toBuilder() -> l
com.google.protobuf.MessageLite$Builder -> a.a.a.aI:
    com.google.protobuf.MessageLite build() -> e
    com.google.protobuf.MessageLite buildPartial() -> d
    com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.MessageLite) -> a
com.google.protobuf.MessageLiteOrBuilder -> a.a.a.aJ:
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> n
    boolean isInitialized() -> h
com.google.protobuf.MessageLiteToString -> a.a.a.aK:
    java.lang.String toString(com.google.protobuf.MessageLite,java.lang.String) -> a
    void reflectivePrintWithIndent(com.google.protobuf.MessageLite,java.lang.StringBuilder,int) -> a
    void printField(java.lang.StringBuilder,int,java.lang.String,java.lang.Object) -> a
    java.lang.String camelCaseToSnakeCase(java.lang.String) -> a
com.google.protobuf.MessageSchema -> a.a.a.aL:
    int[] EMPTY_INT_ARRAY -> a
    sun.misc.Unsafe UNSAFE -> b
    int[] buffer -> c
    java.lang.Object[] objects -> d
    int minFieldNumber -> e
    int maxFieldNumber -> f
    com.google.protobuf.MessageLite defaultInstance -> g
    boolean hasExtensions -> h
    boolean lite -> i
    boolean proto3 -> j
    boolean useCachedSizeField -> k
    int[] intArray -> l
    int checkInitializedCount -> m
    int repeatedFieldOffsetStart -> n
    com.google.protobuf.NewInstanceSchema newInstanceSchema -> o
    com.google.protobuf.ListFieldSchema listFieldSchema -> p
    com.google.protobuf.UnknownFieldSchema unknownFieldSchema -> q
    com.google.protobuf.ExtensionSchema extensionSchema -> r
    com.google.protobuf.MapFieldSchema mapFieldSchema -> s
    void <init>(int[],java.lang.Object[],int,int,com.google.protobuf.MessageLite,boolean,boolean,int[],int,int,com.google.protobuf.NewInstanceSchema,com.google.protobuf.ListFieldSchema,com.google.protobuf.UnknownFieldSchema,com.google.protobuf.ExtensionSchema,com.google.protobuf.MapFieldSchema) -> <init>
    com.google.protobuf.MessageSchema newSchema$5679fbfb(com.google.protobuf.MessageInfo,com.google.protobuf.NewInstanceSchema,com.google.protobuf.ListFieldSchema,com.google.protobuf.UnknownFieldSchema,com.google.protobuf.ExtensionSchema,com.google.protobuf.MapFieldSchema) -> a
    java.lang.reflect.Field reflectField(java.lang.Class,java.lang.String) -> a
    java.lang.Object newInstance() -> a
    boolean equals(java.lang.Object,java.lang.Object) -> a
    int hashCode(java.lang.Object) -> a
    void mergeFrom(java.lang.Object,java.lang.Object) -> b
    void mergeMessage(java.lang.Object,java.lang.Object,int) -> a
    void mergeOneofMessage(java.lang.Object,java.lang.Object,int) -> b
    int getSerializedSize(java.lang.Object) -> b
    int getUnknownFieldsSerializedSize(com.google.protobuf.UnknownFieldSchema,java.lang.Object) -> a
    java.util.List listAt(java.lang.Object,long) -> a
    void writeTo(java.lang.Object,com.google.protobuf.Writer) -> a
    void writeFieldsInAscendingOrderProto2(java.lang.Object,com.google.protobuf.Writer) -> b
    void writeMapHelper(com.google.protobuf.Writer,int,java.lang.Object,int) -> a
    void writeUnknownInMessageTo(com.google.protobuf.UnknownFieldSchema,java.lang.Object,com.google.protobuf.Writer) -> a
    void mergeFrom(java.lang.Object,com.google.protobuf.Reader,com.google.protobuf.ExtensionRegistryLite) -> a
    void mergeFromHelper(com.google.protobuf.UnknownFieldSchema,com.google.protobuf.ExtensionSchema,java.lang.Object,com.google.protobuf.Reader,com.google.protobuf.ExtensionRegistryLite) -> a
    com.google.protobuf.Schema getMessageFieldSchema(int) -> a
    java.lang.Object getMapFieldDefaultEntry(int) -> b
    com.google.protobuf.Internal$EnumVerifier getEnumFieldVerifier(int) -> c
    void makeImmutable(java.lang.Object) -> c
    java.lang.Object filterMapUnknownEnumValues(java.lang.Object,int,java.lang.Object,com.google.protobuf.UnknownFieldSchema) -> a
    java.lang.Object filterUnknownEnumMap(int,int,java.util.Map,com.google.protobuf.Internal$EnumVerifier,java.lang.Object,com.google.protobuf.UnknownFieldSchema) -> a
    boolean isInitialized(java.lang.Object) -> d
    boolean isInitialized(java.lang.Object,int,com.google.protobuf.Schema) -> a
    void writeString(int,java.lang.Object,com.google.protobuf.Writer) -> a
    void readString(java.lang.Object,int,com.google.protobuf.Reader) -> a
    int typeAndOffsetAt(int) -> d
    int presenceMaskAndOffsetAt(int) -> e
    int type(int) -> f
    boolean isEnforceUtf8(int) -> g
    double oneofDoubleAt(java.lang.Object,long) -> b
    float oneofFloatAt(java.lang.Object,long) -> c
    int oneofIntAt(java.lang.Object,long) -> d
    long oneofLongAt(java.lang.Object,long) -> e
    boolean oneofBooleanAt(java.lang.Object,long) -> f
    boolean arePresentForEquals(java.lang.Object,java.lang.Object,int) -> c
    boolean isFieldPresent(java.lang.Object,int,int,int) -> a
    boolean isFieldPresent(java.lang.Object,int) -> a
    void setFieldPresent(java.lang.Object,int) -> b
    boolean isOneofPresent(java.lang.Object,int,int) -> a
    void setOneofPresent(java.lang.Object,int,int) -> b
    void <clinit>() -> <clinit>
com.google.protobuf.MessageSetSchema -> a.a.a.aM:
    com.google.protobuf.MessageLite defaultInstance -> a
    com.google.protobuf.UnknownFieldSchema unknownFieldSchema -> b
    boolean hasExtensions -> c
    com.google.protobuf.ExtensionSchema extensionSchema -> d
    void <init>(com.google.protobuf.UnknownFieldSchema,com.google.protobuf.ExtensionSchema,com.google.protobuf.MessageLite) -> <init>
    com.google.protobuf.MessageSetSchema newSchema(com.google.protobuf.UnknownFieldSchema,com.google.protobuf.ExtensionSchema,com.google.protobuf.MessageLite) -> a
    java.lang.Object newInstance() -> a
    boolean equals(java.lang.Object,java.lang.Object) -> a
    int hashCode(java.lang.Object) -> a
    void mergeFrom(java.lang.Object,java.lang.Object) -> b
    void writeTo(java.lang.Object,com.google.protobuf.Writer) -> a
    void mergeFrom(java.lang.Object,com.google.protobuf.Reader,com.google.protobuf.ExtensionRegistryLite) -> a
    void makeImmutable(java.lang.Object) -> c
    boolean isInitialized(java.lang.Object) -> d
    int getSerializedSize(java.lang.Object) -> b
com.google.protobuf.NewInstanceSchema -> a.a.a.aN:
    java.lang.Object newInstance(java.lang.Object) -> a
com.google.protobuf.NewInstanceSchemaLite -> a.a.a.aO:
    void <init>() -> <init>
    java.lang.Object newInstance(java.lang.Object) -> a
com.google.protobuf.NewInstanceSchemas -> a.a.a.aP:
    com.google.protobuf.NewInstanceSchema FULL_SCHEMA -> a
    com.google.protobuf.NewInstanceSchema LITE_SCHEMA -> b
    com.google.protobuf.NewInstanceSchema full() -> a
    com.google.protobuf.NewInstanceSchema lite() -> b
    com.google.protobuf.NewInstanceSchema loadSchemaForFullRuntime() -> c
    void <clinit>() -> <clinit>
com.google.protobuf.Parser -> a.a.a.aQ:
    java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> a
    java.lang.Object parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite) -> a
com.google.protobuf.PrimitiveNonBoxingCollection -> a.a.a.aR:
com.google.protobuf.ProtoSyntax -> a.a.a.aS:
    com.google.protobuf.ProtoSyntax PROTO2 -> a
    com.google.protobuf.ProtoSyntax PROTO3 -> b
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.Protobuf -> a.a.a.aT:
    com.google.protobuf.Protobuf INSTANCE -> a
    com.google.protobuf.SchemaFactory schemaFactory -> b
    java.util.concurrent.ConcurrentMap schemaCache -> c
    com.google.protobuf.Protobuf getInstance() -> a
    com.google.protobuf.Schema schemaFor(java.lang.Class) -> a
    com.google.protobuf.Schema schemaFor(java.lang.Object) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.ProtobufArrayList -> a.a.a.aU:
    com.google.protobuf.ProtobufArrayList EMPTY_LIST -> a
    java.util.List list -> b
    com.google.protobuf.ProtobufArrayList emptyList() -> d
    void <init>() -> <init>
    void <init>(java.util.List) -> <init>
    void add(int,java.lang.Object) -> add
    java.lang.Object get(int) -> get
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    int size() -> size
    com.google.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.ProtocolStringList -> a.a.a.aV:
com.google.protobuf.RawMessageInfo -> a.a.a.aW:
    com.google.protobuf.MessageLite defaultInstance -> a
    java.lang.String info -> b
    java.lang.Object[] objects -> c
    int flags -> d
    void <init>(com.google.protobuf.MessageLite,java.lang.String,java.lang.Object[]) -> <init>
    java.lang.String getStringInfo() -> d
    java.lang.Object[] getObjects() -> e
    com.google.protobuf.MessageLite getDefaultInstance() -> c
    com.google.protobuf.ProtoSyntax getSyntax() -> a
    boolean isMessageSetWireFormat() -> b
com.google.protobuf.Reader -> a.a.a.aX:
    int getFieldNumber() -> a
    int getTag() -> b
    boolean skipField() -> c
    double readDouble() -> d
    float readFloat() -> e
    long readUInt64() -> f
    long readInt64() -> g
    int readInt32() -> h
    long readFixed64() -> i
    int readFixed32() -> j
    boolean readBool() -> k
    java.lang.String readString() -> l
    java.lang.String readStringRequireUtf8() -> m
    java.lang.Object readMessageBySchemaWithCheck(com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> a
    java.lang.Object readGroupBySchemaWithCheck(com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> b
    com.google.protobuf.ByteString readBytes() -> n
    int readUInt32() -> o
    int readEnum() -> p
    int readSFixed32() -> q
    long readSFixed64() -> r
    int readSInt32() -> s
    long readSInt64() -> t
    void readDoubleList(java.util.List) -> a
    void readFloatList(java.util.List) -> b
    void readUInt64List(java.util.List) -> c
    void readInt64List(java.util.List) -> d
    void readInt32List(java.util.List) -> e
    void readFixed64List(java.util.List) -> f
    void readFixed32List(java.util.List) -> g
    void readBoolList(java.util.List) -> h
    void readStringList(java.util.List) -> i
    void readStringListRequireUtf8(java.util.List) -> j
    void readMessageList(java.util.List,com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> a
    void readGroupList(java.util.List,com.google.protobuf.Schema,com.google.protobuf.ExtensionRegistryLite) -> b
    void readBytesList(java.util.List) -> k
    void readUInt32List(java.util.List) -> l
    void readEnumList(java.util.List) -> m
    void readSFixed32List(java.util.List) -> n
    void readSFixed64List(java.util.List) -> o
    void readSInt32List(java.util.List) -> p
    void readSInt64List(java.util.List) -> q
    void readMap(java.util.Map,com.google.protobuf.MapEntryLite$Metadata,com.google.protobuf.ExtensionRegistryLite) -> a
com.google.protobuf.Schema -> a.a.a.aY:
    void writeTo(java.lang.Object,com.google.protobuf.Writer) -> a
    void mergeFrom(java.lang.Object,com.google.protobuf.Reader,com.google.protobuf.ExtensionRegistryLite) -> a
    void makeImmutable(java.lang.Object) -> c
    boolean isInitialized(java.lang.Object) -> d
    java.lang.Object newInstance() -> a
    boolean equals(java.lang.Object,java.lang.Object) -> a
    int hashCode(java.lang.Object) -> a
    void mergeFrom(java.lang.Object,java.lang.Object) -> b
    int getSerializedSize(java.lang.Object) -> b
com.google.protobuf.SchemaFactory -> a.a.a.aZ:
    com.google.protobuf.Schema createSchema(java.lang.Class) -> a
com.google.protobuf.SchemaUtil -> a.a.a.ba:
    java.lang.Class GENERATED_MESSAGE_CLASS -> a
    com.google.protobuf.UnknownFieldSchema PROTO2_UNKNOWN_FIELD_SET_SCHEMA -> b
    com.google.protobuf.UnknownFieldSchema PROTO3_UNKNOWN_FIELD_SET_SCHEMA -> c
    com.google.protobuf.UnknownFieldSchema UNKNOWN_FIELD_SET_LITE_SCHEMA -> d
    void requireGeneratedMessage(java.lang.Class) -> a
    void writeDoubleList(int,java.util.List,com.google.protobuf.Writer,boolean) -> a
    void writeFloatList(int,java.util.List,com.google.protobuf.Writer,boolean) -> b
    void writeInt64List(int,java.util.List,com.google.protobuf.Writer,boolean) -> c
    void writeUInt64List(int,java.util.List,com.google.protobuf.Writer,boolean) -> d
    void writeSInt64List(int,java.util.List,com.google.protobuf.Writer,boolean) -> e
    void writeFixed64List(int,java.util.List,com.google.protobuf.Writer,boolean) -> f
    void writeSFixed64List(int,java.util.List,com.google.protobuf.Writer,boolean) -> g
    void writeInt32List(int,java.util.List,com.google.protobuf.Writer,boolean) -> h
    void writeUInt32List(int,java.util.List,com.google.protobuf.Writer,boolean) -> i
    void writeSInt32List(int,java.util.List,com.google.protobuf.Writer,boolean) -> j
    void writeFixed32List(int,java.util.List,com.google.protobuf.Writer,boolean) -> k
    void writeSFixed32List(int,java.util.List,com.google.protobuf.Writer,boolean) -> l
    void writeEnumList(int,java.util.List,com.google.protobuf.Writer,boolean) -> m
    void writeBoolList(int,java.util.List,com.google.protobuf.Writer,boolean) -> n
    void writeStringList(int,java.util.List,com.google.protobuf.Writer) -> a
    void writeBytesList(int,java.util.List,com.google.protobuf.Writer) -> b
    void writeMessageList(int,java.util.List,com.google.protobuf.Writer,com.google.protobuf.Schema) -> a
    void writeGroupList(int,java.util.List,com.google.protobuf.Writer,com.google.protobuf.Schema) -> b
    int computeSizeInt64ListNoTag(java.util.List) -> a
    int computeSizeInt64List(int,java.util.List,boolean) -> a
    int computeSizeUInt64ListNoTag(java.util.List) -> b
    int computeSizeUInt64List(int,java.util.List,boolean) -> b
    int computeSizeSInt64ListNoTag(java.util.List) -> c
    int computeSizeSInt64List(int,java.util.List,boolean) -> c
    int computeSizeEnumListNoTag(java.util.List) -> d
    int computeSizeEnumList(int,java.util.List,boolean) -> d
    int computeSizeInt32ListNoTag(java.util.List) -> e
    int computeSizeInt32List(int,java.util.List,boolean) -> e
    int computeSizeUInt32ListNoTag(java.util.List) -> f
    int computeSizeUInt32List(int,java.util.List,boolean) -> f
    int computeSizeSInt32ListNoTag(java.util.List) -> g
    int computeSizeSInt32List(int,java.util.List,boolean) -> g
    int computeSizeFixed32ListNoTag(java.util.List) -> h
    int computeSizeFixed32List(int,java.util.List,boolean) -> h
    int computeSizeFixed64ListNoTag(java.util.List) -> i
    int computeSizeFixed64List(int,java.util.List,boolean) -> i
    int computeSizeBoolListNoTag(java.util.List) -> j
    int computeSizeBoolList(int,java.util.List,boolean) -> j
    int computeSizeStringList(int,java.util.List) -> a
    int computeSizeMessage(int,java.lang.Object,com.google.protobuf.Schema) -> a
    int computeSizeMessageList(int,java.util.List,com.google.protobuf.Schema) -> a
    int computeSizeByteStringList(int,java.util.List) -> b
    int computeSizeGroupList(int,java.util.List,com.google.protobuf.Schema) -> b
    com.google.protobuf.UnknownFieldSchema proto2UnknownFieldSetSchema() -> a
    com.google.protobuf.UnknownFieldSchema proto3UnknownFieldSetSchema() -> b
    com.google.protobuf.UnknownFieldSchema unknownFieldSetLiteSchema() -> c
    com.google.protobuf.UnknownFieldSchema getUnknownFieldSetSchema(boolean) -> a
    java.lang.Class getGeneratedMessageClass() -> d
    java.lang.Class getUnknownFieldSetSchemaClass() -> e
    boolean safeEquals(java.lang.Object,java.lang.Object) -> a
    void mergeMap(com.google.protobuf.MapFieldSchema,java.lang.Object,java.lang.Object,long) -> a
    void mergeExtensions(com.google.protobuf.ExtensionSchema,java.lang.Object,java.lang.Object) -> a
    void mergeUnknownFields(com.google.protobuf.UnknownFieldSchema,java.lang.Object,java.lang.Object) -> a
    java.lang.Object filterUnknownEnumList(int,java.util.List,com.google.protobuf.Internal$EnumVerifier,java.lang.Object,com.google.protobuf.UnknownFieldSchema) -> a
    java.lang.Object storeUnknownEnum(int,int,java.lang.Object,com.google.protobuf.UnknownFieldSchema) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.SmallSortedMap -> a.a.a.bb:
    int maxArraySize -> a
    java.util.List entryList -> b
    java.util.Map overflowEntries -> c
    boolean isImmutable -> d
    com.google.protobuf.SmallSortedMap$EntrySet lazyEntrySet -> e
    java.util.Map overflowEntriesDescending -> f
    com.google.protobuf.SmallSortedMap$DescendingEntrySet lazyDescendingEntrySet -> g
    com.google.protobuf.SmallSortedMap newFieldMap(int) -> a
    void <init>(int) -> <init>
    void makeImmutable() -> a
    boolean isImmutable() -> b
    int getNumArrayEntries() -> c
    java.util.Map$Entry getArrayEntryAt(int) -> b
    java.lang.Iterable getOverflowEntries() -> d
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Comparable,java.lang.Object) -> a
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeArrayEntryAt(int) -> c
    int binarySearchInArray(java.lang.Comparable) -> a
    java.util.Set entrySet() -> entrySet
    java.util.Set descendingEntrySet() -> e
    void checkMutable() -> f
    java.util.SortedMap getOverflowEntriesMutable() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void <init>(int,byte) -> <init>
    void access$300(com.google.protobuf.SmallSortedMap) -> a
    java.util.List access$600(com.google.protobuf.SmallSortedMap) -> b
    java.util.Map access$700(com.google.protobuf.SmallSortedMap) -> c
    java.lang.Object access$800(com.google.protobuf.SmallSortedMap,int) -> a
    java.util.Map access$900(com.google.protobuf.SmallSortedMap) -> d
com.google.protobuf.SmallSortedMap$1 -> a.a.a.bc:
    void <init>(int) -> <init>
    void makeImmutable() -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
com.google.protobuf.SmallSortedMap$DescendingEntryIterator -> a.a.a.bd:
    int pos -> a
    java.util.Iterator lazyOverflowIterator -> b
    com.google.protobuf.SmallSortedMap this$0 -> c
    void <init>(com.google.protobuf.SmallSortedMap) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.util.Iterator getOverflowIterator() -> a
    java.lang.Object next() -> next
    void <init>(com.google.protobuf.SmallSortedMap,byte) -> <init>
com.google.protobuf.SmallSortedMap$DescendingEntrySet -> a.a.a.be:
    com.google.protobuf.SmallSortedMap this$0 -> a
    void <init>(com.google.protobuf.SmallSortedMap) -> <init>
    java.util.Iterator iterator() -> iterator
    void <init>(com.google.protobuf.SmallSortedMap,byte) -> <init>
com.google.protobuf.SmallSortedMap$EmptySet -> a.a.a.bf:
    java.util.Iterator ITERATOR -> a
    java.lang.Iterable ITERABLE -> b
    java.lang.Iterable iterable() -> a
    java.util.Iterator access$1000() -> b
    void <clinit>() -> <clinit>
com.google.protobuf.SmallSortedMap$EmptySet$1 -> a.a.a.bg:
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.protobuf.SmallSortedMap$EmptySet$2 -> a.a.a.bh:
    void <init>() -> <init>
    java.util.Iterator iterator() -> iterator
com.google.protobuf.SmallSortedMap$Entry -> a.a.a.bi:
    java.lang.Comparable key -> a
    java.lang.Object value -> b
    com.google.protobuf.SmallSortedMap this$0 -> c
    void <init>(com.google.protobuf.SmallSortedMap,java.util.Map$Entry) -> <init>
    void <init>(com.google.protobuf.SmallSortedMap,java.lang.Comparable,java.lang.Object) -> <init>
    java.lang.Comparable getKey() -> a
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object,java.lang.Object) -> a
    java.lang.Object getKey() -> getKey
    int compareTo(java.lang.Object) -> compareTo
com.google.protobuf.SmallSortedMap$EntryIterator -> a.a.a.bj:
    int pos -> a
    boolean nextCalledBeforeRemove -> b
    java.util.Iterator lazyOverflowIterator -> c
    com.google.protobuf.SmallSortedMap this$0 -> d
    void <init>(com.google.protobuf.SmallSortedMap) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.util.Iterator getOverflowIterator() -> a
    java.lang.Object next() -> next
    void <init>(com.google.protobuf.SmallSortedMap,byte) -> <init>
com.google.protobuf.SmallSortedMap$EntrySet -> a.a.a.bk:
    com.google.protobuf.SmallSortedMap this$0 -> a
    void <init>(com.google.protobuf.SmallSortedMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    void <init>(com.google.protobuf.SmallSortedMap,byte) -> <init>
com.google.protobuf.TextFormatEscaper -> a.a.a.bl:
    java.lang.String escapeBytes(com.google.protobuf.TextFormatEscaper$ByteSequence) -> a
    java.lang.String escapeBytes(com.google.protobuf.ByteString) -> a
com.google.protobuf.TextFormatEscaper$1 -> a.a.a.bm:
    com.google.protobuf.ByteString val$input -> a
    void <init>(com.google.protobuf.ByteString) -> <init>
    int size() -> a
    byte byteAt(int) -> a
com.google.protobuf.TextFormatEscaper$ByteSequence -> a.a.a.bn:
    int size() -> a
    byte byteAt(int) -> a
com.google.protobuf.UninitializedMessageException -> a.a.a.bo:
    void <init>() -> <init>
com.google.protobuf.UnknownFieldSchema -> a.a.a.bp:
    void <init>() -> <init>
    void addVarint(java.lang.Object,int,long) -> a
    void addFixed32(java.lang.Object,int,int) -> a
    void addFixed64(java.lang.Object,int,long) -> b
    void addLengthDelimited(java.lang.Object,int,com.google.protobuf.ByteString) -> a
    void addGroup(java.lang.Object,int,java.lang.Object) -> a
    java.lang.Object newBuilder() -> a
    java.lang.Object toImmutable(java.lang.Object) -> a
    void setToMessage(java.lang.Object,java.lang.Object) -> a
    java.lang.Object getFromMessage(java.lang.Object) -> b
    java.lang.Object getBuilderFromMessage(java.lang.Object) -> c
    void setBuilderToMessage(java.lang.Object,java.lang.Object) -> b
    void makeImmutable(java.lang.Object) -> d
    boolean mergeOneFieldFrom(java.lang.Object,com.google.protobuf.Reader) -> a
    void mergeFrom(java.lang.Object,com.google.protobuf.Reader) -> b
    void writeTo(java.lang.Object,com.google.protobuf.Writer) -> a
    void writeAsMessageSetTo(java.lang.Object,com.google.protobuf.Writer) -> b
    java.lang.Object merge(java.lang.Object,java.lang.Object) -> c
    int getSerializedSizeAsMessageSet(java.lang.Object) -> e
    int getSerializedSize(java.lang.Object) -> f
com.google.protobuf.UnknownFieldSetLite -> a.a.a.bq:
    com.google.protobuf.UnknownFieldSetLite DEFAULT_INSTANCE -> a
    int count -> b
    int[] tags -> c
    java.lang.Object[] objects -> d
    int memoizedSerializedSize -> e
    boolean isMutable -> f
    com.google.protobuf.UnknownFieldSetLite getDefaultInstance() -> a
    com.google.protobuf.UnknownFieldSetLite newInstance() -> b
    com.google.protobuf.UnknownFieldSetLite mutableCopyOf(com.google.protobuf.UnknownFieldSetLite,com.google.protobuf.UnknownFieldSetLite) -> a
    void <init>() -> <init>
    void <init>(int,int[],java.lang.Object[],boolean) -> <init>
    void makeImmutable() -> c
    void writeAsMessageSetTo(com.google.protobuf.Writer) -> a
    void writeTo(com.google.protobuf.Writer) -> b
    void writeField(int,java.lang.Object,com.google.protobuf.Writer) -> a
    int getSerializedSizeAsMessageSet() -> d
    int getSerializedSize() -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void printWithIndent(java.lang.StringBuilder,int) -> a
    void storeField(int,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.UnknownFieldSetLiteSchema -> a.a.a.br:
    void <init>() -> <init>
    void setToMessage(java.lang.Object,com.google.protobuf.UnknownFieldSetLite) -> a
    void makeImmutable(java.lang.Object) -> d
    int getSerializedSize(java.lang.Object) -> f
    int getSerializedSizeAsMessageSet(java.lang.Object) -> e
    java.lang.Object merge(java.lang.Object,java.lang.Object) -> c
    void writeAsMessageSetTo(java.lang.Object,com.google.protobuf.Writer) -> b
    void writeTo(java.lang.Object,com.google.protobuf.Writer) -> a
    void setBuilderToMessage(java.lang.Object,java.lang.Object) -> b
    java.lang.Object getBuilderFromMessage(java.lang.Object) -> c
    java.lang.Object getFromMessage(java.lang.Object) -> b
    void setToMessage(java.lang.Object,java.lang.Object) -> a
    java.lang.Object toImmutable(java.lang.Object) -> a
    java.lang.Object newBuilder() -> a
    void addGroup(java.lang.Object,int,java.lang.Object) -> a
    void addLengthDelimited(java.lang.Object,int,com.google.protobuf.ByteString) -> a
    void addFixed64(java.lang.Object,int,long) -> b
    void addFixed32(java.lang.Object,int,int) -> a
    void addVarint(java.lang.Object,int,long) -> a
com.google.protobuf.UnmodifiableLazyStringList -> a.a.a.bs:
    com.google.protobuf.LazyStringList list -> a
    void <init>(com.google.protobuf.LazyStringList) -> <init>
    java.lang.Object getRaw(int) -> b
    int size() -> size
    void add(com.google.protobuf.ByteString) -> a
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.Iterator iterator() -> iterator
    java.util.List getUnderlyingElements() -> d
    com.google.protobuf.LazyStringList getUnmodifiableView() -> e
    java.lang.Object get(int) -> get
    com.google.protobuf.LazyStringList access$000(com.google.protobuf.UnmodifiableLazyStringList) -> a
com.google.protobuf.UnmodifiableLazyStringList$1 -> a.a.a.bt:
    java.util.ListIterator iter -> a
    int val$index -> b
    com.google.protobuf.UnmodifiableLazyStringList this$0 -> c
    void <init>(com.google.protobuf.UnmodifiableLazyStringList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void remove() -> remove
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
com.google.protobuf.UnmodifiableLazyStringList$2 -> a.a.a.bu:
    java.util.Iterator iter -> a
    com.google.protobuf.UnmodifiableLazyStringList this$0 -> b
    void <init>(com.google.protobuf.UnmodifiableLazyStringList) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
com.google.protobuf.UnsafeUtil -> a.a.a.bv:
    java.util.logging.Logger logger -> a
    sun.misc.Unsafe UNSAFE -> b
    com.google.protobuf.UnsafeUtil$MemoryAccessor MEMORY_ACCESSOR -> c
    boolean HAS_UNSAFE_BYTEBUFFER_OPERATIONS -> d
    boolean HAS_UNSAFE_ARRAY_OPERATIONS -> e
    long BYTE_ARRAY_BASE_OFFSET -> f
    void <init>() -> <init>
    boolean hasUnsafeArrayOperations() -> a
    boolean hasUnsafeByteBufferOperations() -> b
    java.lang.Object allocateInstance(java.lang.Class) -> a
    int arrayBaseOffset(java.lang.Class) -> b
    int arrayIndexScale(java.lang.Class) -> c
    int getInt(java.lang.Object,long) -> a
    void putInt(java.lang.Object,long,int) -> a
    long getLong(java.lang.Object,long) -> b
    void putLong(java.lang.Object,long,long) -> a
    boolean getBoolean(java.lang.Object,long) -> c
    void putBoolean(java.lang.Object,long,boolean) -> a
    float getFloat(java.lang.Object,long) -> d
    void putFloat(java.lang.Object,long,float) -> a
    double getDouble(java.lang.Object,long) -> e
    void putDouble(java.lang.Object,long,double) -> a
    java.lang.Object getObject(java.lang.Object,long) -> f
    void putObject(java.lang.Object,long,java.lang.Object) -> a
    byte getByte(byte[],long) -> a
    void putByte(byte[],long,byte) -> a
    sun.misc.Unsafe getUnsafe() -> c
    boolean supportsUnsafeArrayOperations() -> d
    boolean supportsUnsafeByteBufferOperations() -> e
    java.lang.reflect.Field bufferAddressField() -> f
    java.lang.reflect.Field field(java.lang.Class,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.UnsafeUtil$1 -> a.a.a.bw:
    void <init>() -> <init>
    java.lang.Object run() -> run
com.google.protobuf.UnsafeUtil$JvmMemoryAccessor -> a.a.a.bx:
    void <init>(sun.misc.Unsafe) -> <init>
    byte getByte(java.lang.Object,long) -> a
    void putByte(java.lang.Object,long,byte) -> a
    boolean getBoolean(java.lang.Object,long) -> b
    void putBoolean(java.lang.Object,long,boolean) -> a
    float getFloat(java.lang.Object,long) -> c
    void putFloat(java.lang.Object,long,float) -> a
    double getDouble(java.lang.Object,long) -> d
    void putDouble(java.lang.Object,long,double) -> a
com.google.protobuf.UnsafeUtil$MemoryAccessor -> a.a.a.by:
    sun.misc.Unsafe unsafe -> a
    void <init>(sun.misc.Unsafe) -> <init>
    long objectFieldOffset(java.lang.reflect.Field) -> a
    byte getByte(java.lang.Object,long) -> a
    void putByte(java.lang.Object,long,byte) -> a
    boolean getBoolean(java.lang.Object,long) -> b
    void putBoolean(java.lang.Object,long,boolean) -> a
    float getFloat(java.lang.Object,long) -> c
    void putFloat(java.lang.Object,long,float) -> a
    double getDouble(java.lang.Object,long) -> d
    void putDouble(java.lang.Object,long,double) -> a
com.google.protobuf.Utf8 -> a.a.a.bz:
    com.google.protobuf.Utf8$Processor processor -> a
    boolean isValidUtf8(byte[]) -> a
    boolean isValidUtf8(byte[],int,int) -> a
    int incompleteStateFor(int) -> b
    int incompleteStateFor(int,int) -> b
    int incompleteStateFor(int,int,int) -> b
    int encodedLength(java.lang.CharSequence) -> a
    int encode(java.lang.CharSequence,byte[],int,int) -> a
    java.lang.String decodeUtf8(byte[],int,int) -> b
    int access$000(int,int) -> a
    int access$100(int,int,int) -> a
    int access$1100(byte[],int,int) -> c
    int access$1200(int) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.Utf8$DecodeUtil -> a.a.a.bA:
    boolean isNotTrailingByte(byte) -> d
    boolean access$400(byte) -> a
    void access$500(byte,char[],int) -> a
    boolean access$600(byte) -> b
    void access$700(byte,byte,char[],int) -> a
    boolean access$800(byte) -> c
    void access$900(byte,byte,byte,char[],int) -> a
    void access$1000(byte,byte,byte,byte,char[],int) -> a
com.google.protobuf.Utf8$Processor -> a.a.a.bB:
    void <init>() -> <init>
    boolean isValidUtf8(byte[],int,int) -> a
    int partialIsValidUtf8(int,byte[],int,int) -> a
    java.lang.String decodeUtf8(byte[],int,int) -> b
    int encodeUtf8(java.lang.CharSequence,byte[],int,int) -> a
com.google.protobuf.Utf8$SafeProcessor -> a.a.a.bC:
    void <init>() -> <init>
    int partialIsValidUtf8(int,byte[],int,int) -> a
    java.lang.String decodeUtf8(byte[],int,int) -> b
    int encodeUtf8(java.lang.CharSequence,byte[],int,int) -> a
com.google.protobuf.Utf8$UnpairedSurrogateException -> a.a.a.bD:
    void <init>(int,int) -> <init>
com.google.protobuf.Utf8$UnsafeProcessor -> a.a.a.bE:
    void <init>() -> <init>
    int partialIsValidUtf8(int,byte[],int,int) -> a
    java.lang.String decodeUtf8(byte[],int,int) -> b
    int encodeUtf8(java.lang.CharSequence,byte[],int,int) -> a
    int partialIsValidUtf8(byte[],long,int) -> a
    int unsafeIncompleteStateFor(byte[],int,long,int) -> a
com.google.protobuf.WireFormat -> a.a.a.bF:
    int MESSAGE_SET_ITEM_TAG -> a
    int MESSAGE_SET_ITEM_END_TAG -> b
    int MESSAGE_SET_TYPE_ID_TAG -> c
    int MESSAGE_SET_MESSAGE_TAG -> d
    int getTagWireType(int) -> a
    int getTagFieldNumber(int) -> b
    int makeTag(int,int) -> a
    void <clinit>() -> <clinit>
com.google.protobuf.WireFormat$FieldType -> a.a.a.bG:
    com.google.protobuf.WireFormat$FieldType DOUBLE -> a
    com.google.protobuf.WireFormat$FieldType FLOAT -> b
    com.google.protobuf.WireFormat$FieldType INT64 -> c
    com.google.protobuf.WireFormat$FieldType UINT64 -> d
    com.google.protobuf.WireFormat$FieldType INT32 -> e
    com.google.protobuf.WireFormat$FieldType FIXED64 -> f
    com.google.protobuf.WireFormat$FieldType FIXED32 -> g
    com.google.protobuf.WireFormat$FieldType BOOL -> h
    com.google.protobuf.WireFormat$FieldType STRING -> i
    com.google.protobuf.WireFormat$FieldType GROUP -> j
    com.google.protobuf.WireFormat$FieldType MESSAGE -> k
    com.google.protobuf.WireFormat$FieldType BYTES -> l
    com.google.protobuf.WireFormat$FieldType UINT32 -> m
    com.google.protobuf.WireFormat$FieldType ENUM -> n
    com.google.protobuf.WireFormat$FieldType SFIXED32 -> o
    com.google.protobuf.WireFormat$FieldType SFIXED64 -> p
    com.google.protobuf.WireFormat$FieldType SINT32 -> q
    com.google.protobuf.WireFormat$FieldType SINT64 -> r
    com.google.protobuf.WireFormat$JavaType javaType -> s
    int wireType -> t
    com.google.protobuf.WireFormat$FieldType[] $VALUES -> u
    com.google.protobuf.WireFormat$FieldType[] values() -> a
    void <init>(java.lang.String,int,com.google.protobuf.WireFormat$JavaType,int) -> <init>
    com.google.protobuf.WireFormat$JavaType getJavaType() -> b
    void <init>(java.lang.String,int,com.google.protobuf.WireFormat$JavaType,int,byte) -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.WireFormat$FieldType$1 -> a.a.a.bH:
    void <init>(java.lang.String,int,com.google.protobuf.WireFormat$JavaType,int) -> <init>
com.google.protobuf.WireFormat$FieldType$2 -> a.a.a.bI:
    void <init>(java.lang.String,int,com.google.protobuf.WireFormat$JavaType,int) -> <init>
com.google.protobuf.WireFormat$FieldType$3 -> a.a.a.bJ:
    void <init>(java.lang.String,int,com.google.protobuf.WireFormat$JavaType,int) -> <init>
com.google.protobuf.WireFormat$FieldType$4 -> a.a.a.bK:
    void <init>(java.lang.String,int,com.google.protobuf.WireFormat$JavaType,int) -> <init>
com.google.protobuf.WireFormat$JavaType -> a.a.a.bL:
    com.google.protobuf.WireFormat$JavaType INT -> a
    com.google.protobuf.WireFormat$JavaType LONG -> b
    com.google.protobuf.WireFormat$JavaType FLOAT -> c
    com.google.protobuf.WireFormat$JavaType DOUBLE -> d
    com.google.protobuf.WireFormat$JavaType BOOLEAN -> e
    com.google.protobuf.WireFormat$JavaType STRING -> f
    com.google.protobuf.WireFormat$JavaType BYTE_STRING -> g
    com.google.protobuf.WireFormat$JavaType ENUM -> h
    com.google.protobuf.WireFormat$JavaType MESSAGE -> i
    com.google.protobuf.WireFormat$JavaType[] $VALUES -> j
    com.google.protobuf.WireFormat$JavaType[] values() -> a
    void <init>(java.lang.String,int,java.lang.Object) -> <init>
    void <clinit>() -> <clinit>
com.google.protobuf.Writer -> a.a.a.bM:
    com.google.protobuf.Writer$FieldOrder fieldOrder() -> a
    void writeSFixed32(int,int) -> a
    void writeInt64(int,long) -> a
    void writeSFixed64(int,long) -> b
    void writeFloat(int,float) -> a
    void writeDouble(int,double) -> a
    void writeEnum(int,int) -> b
    void writeUInt64(int,long) -> c
    void writeInt32(int,int) -> c
    void writeFixed64(int,long) -> d
    void writeFixed32(int,int) -> d
    void writeBool(int,boolean) -> a
    void writeString(int,java.lang.String) -> a
    void writeBytes(int,com.google.protobuf.ByteString) -> a
    void writeUInt32(int,int) -> e
    void writeSInt32(int,int) -> f
    void writeSInt64(int,long) -> e
    void writeMessage(int,java.lang.Object,com.google.protobuf.Schema) -> a
    void writeGroup(int,java.lang.Object,com.google.protobuf.Schema) -> b
    void writeStartGroup(int) -> a
    void writeEndGroup(int) -> b
    void writeInt32List(int,java.util.List,boolean) -> a
    void writeFixed32List(int,java.util.List,boolean) -> b
    void writeInt64List(int,java.util.List,boolean) -> c
    void writeUInt64List(int,java.util.List,boolean) -> d
    void writeFixed64List(int,java.util.List,boolean) -> e
    void writeFloatList(int,java.util.List,boolean) -> f
    void writeDoubleList(int,java.util.List,boolean) -> g
    void writeEnumList(int,java.util.List,boolean) -> h
    void writeBoolList(int,java.util.List,boolean) -> i
    void writeStringList(int,java.util.List) -> a
    void writeBytesList(int,java.util.List) -> b
    void writeUInt32List(int,java.util.List,boolean) -> j
    void writeSFixed32List(int,java.util.List,boolean) -> k
    void writeSFixed64List(int,java.util.List,boolean) -> l
    void writeSInt32List(int,java.util.List,boolean) -> m
    void writeSInt64List(int,java.util.List,boolean) -> n
    void writeMessageList(int,java.util.List,com.google.protobuf.Schema) -> a
    void writeGroupList(int,java.util.List,com.google.protobuf.Schema) -> b
    void writeMessageSetItem(int,java.lang.Object) -> a
    void writeMap(int,com.google.protobuf.MapEntryLite$Metadata,java.util.Map) -> a
com.google.protobuf.Writer$FieldOrder -> a.a.a.bN:
    com.google.protobuf.Writer$FieldOrder ASCENDING -> a
    com.google.protobuf.Writer$FieldOrder DESCENDING -> b
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
jugglinglab.JugglingLab -> jugglinglab.JugglingLab:
    void <init>() -> <init>
    byte[] getPatternProto(java.lang.String) -> getPatternProto
    void test() -> test
    void main(java.lang.String[]) -> main
jugglinglab.curve.Curve -> jugglinglab.curve.Curve:
    int numpoints -> numpoints
    double[] times -> times
    jugglinglab.util.Coordinate[] positions -> positions
    jugglinglab.util.Coordinate[] velocities -> velocities
    void <init>() -> <init>
    void calcCurve() -> calcCurve
    void getCoordinate(double,jugglinglab.util.Coordinate) -> getCoordinate
    jugglinglab.util.Coordinate getMax2(double,double) -> getMax2
    jugglinglab.util.Coordinate getMin2(double,double) -> getMin2
    void setCurve(double[],jugglinglab.util.Coordinate[],jugglinglab.util.Coordinate[]) -> setCurve
    double getStartTime() -> getStartTime
    double getEndTime() -> getEndTime
    jugglinglab.util.Coordinate getMax(double,double) -> getMax
    jugglinglab.util.Coordinate getMin(double,double) -> getMin
    jugglinglab.util.Coordinate check(jugglinglab.util.Coordinate,double,boolean) -> check
jugglinglab.curve.SplineCurve -> jugglinglab.curve.SplineCurve:
    int n -> n
    double[][] a -> a
    double[][] b -> b
    double[][] c -> c
    double[][] d -> d
    void <init>() -> <init>
    void calcCurve() -> calcCurve
    void findvels_edges_known(int,double[],jugglinglab.util.Coordinate[],jugglinglab.util.Coordinate[]) -> findvels_edges_known
    void findvels_edges_unknown(int,double[],jugglinglab.util.Coordinate[],jugglinglab.util.Coordinate[]) -> findvels_edges_unknown
    void tridag(double[],double[],double[],double[],double[],int) -> tridag
    void getCoordinate(double,jugglinglab.util.Coordinate) -> getCoordinate
    jugglinglab.util.Coordinate getMax2(double,double) -> getMax2
    jugglinglab.util.Coordinate getMin2(double,double) -> getMin2
jugglinglab.jml.EventImages -> jugglinglab.jml.EventImages:
    jugglinglab.jml.JMLPattern pat -> pat
    int numjugglers -> numjugglers
    int numpaths -> numpaths
    double looptime -> looptime
    jugglinglab.util.Permutation loopperm -> loopperm
    jugglinglab.jml.JMLEvent ev -> ev
    int evjuggler -> evjuggler
    int evhand -> evhand
    int evtransitions -> evtransitions
    double evtime -> evtime
    jugglinglab.util.Permutation[][][] ea -> ea
    int numentries -> numentries
    int[] transitiontype -> transitiontype
    int currentloop -> currentloop
    int currentj -> currentj
    int currenth -> currenth
    int currententry -> currententry
    void <init>(jugglinglab.jml.JMLPattern,jugglinglab.jml.JMLEvent) -> <init>
    jugglinglab.jml.JMLEvent getNext() -> getNext
    jugglinglab.jml.JMLEvent getPrevious() -> getPrevious
    jugglinglab.jml.JMLEvent makeEvent() -> makeEvent
    void resetPosition() -> resetPosition
    boolean hasJMLTransitionForHand(int,int) -> hasJMLTransitionForHand
    boolean hasVDJMLTransitionForHand(int,int) -> hasVDJMLTransitionForHand
    boolean hasJMLTransitionForPath(int) -> hasJMLTransitionForPath
    boolean hasVDJMLTransitionForPath(int) -> hasVDJMLTransitionForPath
    void calcarray() -> calcarray
jugglinglab.jml.HandLink -> jugglinglab.jml.HandLink:
    int jugglernum -> jugglernum
    int handnum -> handnum
    jugglinglab.jml.JMLEvent startevent -> startevent
    jugglinglab.jml.JMLEvent endevent -> endevent
    jugglinglab.jml.VelocityRef startvelref -> startvelref
    jugglinglab.jml.VelocityRef endvelref -> endvelref
    jugglinglab.curve.Curve hp -> hp
    boolean ismaster -> ismaster
    jugglinglab.jml.HandLink[] duplicates -> duplicates
    jugglinglab.jml.HandLink master -> master
    void <init>(int,int,jugglinglab.jml.JMLEvent,jugglinglab.jml.JMLEvent) -> <init>
    int index(int) -> index
    jugglinglab.jml.JMLEvent getStartEvent() -> getStartEvent
    jugglinglab.jml.JMLEvent getEndEvent() -> getEndEvent
    jugglinglab.jml.VelocityRef getStartVelocityRef() -> getStartVelocityRef
    void setStartVelocityRef(jugglinglab.jml.VelocityRef) -> setStartVelocityRef
    jugglinglab.jml.VelocityRef getEndVelocityRef() -> getEndVelocityRef
    void setEndVelocityRef(jugglinglab.jml.VelocityRef) -> setEndVelocityRef
    void setHandCurve(jugglinglab.curve.Curve) -> setHandCurve
    jugglinglab.curve.Curve getHandCurve() -> getHandCurve
    java.lang.String toString() -> toString
jugglinglab.jml.JMLDefs -> jugglinglab.jml.a:
    java.lang.String[] jmlprefix -> a
    java.lang.String[] jmlsuffix -> b
    void <clinit>() -> <clinit>
jugglinglab.jml.JMLEvent -> jugglinglab.jml.JMLEvent:
    double x -> x
    double y -> y
    double z -> z
    double gx -> gx
    double gy -> gy
    double gz -> gz
    boolean globalvalid -> globalvalid
    double t -> t
    int juggler -> juggler
    int hand -> hand
    java.util.ArrayList transitions -> transitions
    int delay -> delay
    int delayunits -> delayunits
    jugglinglab.util.Permutation pathpermfrommaster -> pathpermfrommaster
    jugglinglab.jml.JMLEvent master -> master
    boolean calcpos -> calcpos
    jugglinglab.jml.JMLEvent prev -> prev
    jugglinglab.jml.JMLEvent next -> next
    void <init>() -> <init>
    jugglinglab.util.Coordinate getLocalCoordinate() -> getLocalCoordinate
    void setLocalCoordinate(jugglinglab.util.Coordinate) -> setLocalCoordinate
    jugglinglab.util.Coordinate getGlobalCoordinate() -> getGlobalCoordinate
    void setGlobalCoordinate(jugglinglab.util.Coordinate) -> setGlobalCoordinate
    double getT() -> getT
    void setT(double) -> setT
    int getHand() -> getHand
    void setHand(int,int) -> setHand
    int getJuggler() -> getJuggler
    int getNumberOfTransitions() -> getNumberOfTransitions
    jugglinglab.jml.JMLTransition getTransition(int) -> getTransition
    void addTransition(jugglinglab.jml.JMLTransition) -> addTransition
    boolean isMaster() -> isMaster
    jugglinglab.jml.JMLEvent getMaster() -> getMaster
    void setMaster(jugglinglab.jml.JMLEvent) -> setMaster
    jugglinglab.jml.JMLEvent getPrevious() -> getPrevious
    void setPrevious(jugglinglab.jml.JMLEvent) -> setPrevious
    jugglinglab.jml.JMLEvent getNext() -> getNext
    void setNext(jugglinglab.jml.JMLEvent) -> setNext
    void setPathPermFromMaster(jugglinglab.util.Permutation) -> setPathPermFromMaster
    boolean isDelayOf(jugglinglab.jml.JMLEvent) -> isDelayOf
    jugglinglab.jml.JMLTransition getPathTransition(int,int) -> getPathTransition
    jugglinglab.jml.JMLEvent duplicate(int,int) -> duplicate
    void writeJML(java.io.PrintWriter) -> writeJML
    java.lang.String toString() -> toString
jugglinglab.jml.JMLNode -> jugglinglab.jml.b:
    java.lang.String xmlescape(java.lang.String) -> a
jugglinglab.jml.JMLPattern -> jugglinglab.jml.JMLPattern:
    java.lang.String version -> version
    java.lang.String title -> title
    java.lang.String info -> info
    java.util.ArrayList tags -> tags
    int numjugglers -> numjugglers
    int numpaths -> numpaths
    java.util.ArrayList props -> props
    int[] propassignment -> propassignment
    java.lang.String base_pattern_notation -> base_pattern_notation
    java.lang.String base_pattern_config -> base_pattern_config
    boolean base_pattern_hashcode_valid -> base_pattern_hashcode_valid
    boolean[] hasVDPathJMLTransition -> hasVDPathJMLTransition
    boolean[][] hasVDHandJMLTransition -> hasVDHandJMLTransition
    java.util.ArrayList symmetries -> symmetries
    jugglinglab.jml.JMLEvent eventlist -> eventlist
    jugglinglab.jml.JMLPosition positionlist -> positionlist
    java.util.ArrayList pathlinks -> pathlinks
    java.util.ArrayList handlinks -> handlinks
    jugglinglab.curve.Curve[] jugglercurve -> jugglercurve
    jugglinglab.curve.Curve[] jugglerangle -> jugglerangle
    java.lang.String loadingversion -> loadingversion
    boolean laidout -> laidout
    boolean valid -> valid
    void <init>() -> <init>
    void setTitle(java.lang.String) -> setTitle
    void setNumberOfJugglers(int) -> setNumberOfJugglers
    void setNumberOfPaths(int) -> setNumberOfPaths
    void addProp(jugglinglab.jml.PropDef) -> addProp
    void setPropAssignments(int[]) -> setPropAssignments
    void addSymmetry(jugglinglab.jml.JMLSymmetry) -> addSymmetry
    void addEvent(jugglinglab.jml.JMLEvent) -> addEvent
    void removeEvent(jugglinglab.jml.JMLEvent) -> removeEvent
    jugglinglab.jml.JMLEvent getEventList() -> getEventList
    java.util.ArrayList getPathLinks() -> getPathLinks
    void addPosition(jugglinglab.jml.JMLPosition) -> addPosition
    jugglinglab.jml.JMLPosition getPositionList() -> getPositionList
    jugglinglab.jml.JMLPattern fromBasePattern(java.lang.String,java.lang.String) -> fromBasePattern
    void scaleTime(double) -> scaleTime
    double scaleTimeToFitThrows(double) -> scaleTimeToFitThrows
    jugglinglab.jml.JMLPattern layoutPattern() -> layoutPattern
    void setNeedsLayout() -> setNeedsLayout
    void buildEventList() -> buildEventList
    void findMasterEvents() -> findMasterEvents
    void findPositions() -> findPositions
    void gotoGlobalCoordinates() -> gotoGlobalCoordinates
    void buildLinkLists() -> buildLinkLists
    void layoutHandPaths() -> layoutHandPaths
    int getNumberOfJugglers() -> getNumberOfJugglers
    int getNumberOfPaths() -> getNumberOfPaths
    int getNumberOfProps() -> getNumberOfProps
    int getPropAssignment(int) -> getPropAssignment
    int getNumberOfSymmetries() -> getNumberOfSymmetries
    jugglinglab.jml.JMLSymmetry getSymmetry(int) -> getSymmetry
    double getLoopStartTime() -> getLoopStartTime
    double getLoopEndTime() -> getLoopEndTime
    void getJugglerPosition(int,double,jugglinglab.util.Coordinate) -> getJugglerPosition
    double getJugglerAngle(int,double) -> getJugglerAngle
    jugglinglab.util.Coordinate convertLocalToGlobal(jugglinglab.util.Coordinate,int,double) -> convertLocalToGlobal
    jugglinglab.util.Permutation getPathPermutation() -> getPathPermutation
    void writeJML(java.io.Writer,boolean,boolean) -> writeJML
    java.lang.String toString() -> toString
jugglinglab.jml.JMLPosition -> jugglinglab.jml.c:
    double x -> a
    double y -> b
    double z -> c
    double t -> d
    double angle -> e
    int juggler -> f
    jugglinglab.jml.JMLPosition prev -> g
    jugglinglab.jml.JMLPosition next -> h
    void <init>() -> <init>
    jugglinglab.util.Coordinate getCoordinate() -> a
    void setCoordinate(jugglinglab.util.Coordinate) -> a
    double getAngle() -> b
    void setAngle(double) -> a
    double getT() -> c
    void setT(double) -> b
    int getJuggler() -> d
    void setJuggler(int) -> a
    jugglinglab.jml.JMLPosition getPrevious() -> e
    void setPrevious(jugglinglab.jml.JMLPosition) -> a
    jugglinglab.jml.JMLPosition getNext() -> f
    void setNext(jugglinglab.jml.JMLPosition) -> b
jugglinglab.jml.JMLSymmetry -> jugglinglab.jml.JMLSymmetry:
    int type -> type
    int numjugglers -> numjugglers
    int numpaths -> numpaths
    jugglinglab.util.Permutation jugglerperm -> jugglerperm
    jugglinglab.util.Permutation pathperm -> pathperm
    double delay -> delay
    void <init>() -> <init>
    void <init>(int,int,java.lang.String,int,java.lang.String,double) -> <init>
    int getType() -> getType
    void setType(int) -> setType
    jugglinglab.util.Permutation getJugglerPerm() -> getJugglerPerm
    void setJugglerPerm(int,java.lang.String) -> setJugglerPerm
    jugglinglab.util.Permutation getPathPerm() -> getPathPerm
    void setPathPerm(int,java.lang.String) -> setPathPerm
    double getDelay() -> getDelay
    void setDelay(double) -> setDelay
    void writeJML(java.io.PrintWriter) -> writeJML
jugglinglab.jml.JMLTransition -> jugglinglab.jml.JMLTransition:
    int path -> path
    java.lang.String type -> type
    java.lang.String mod -> mod
    jugglinglab.jml.PathLink ipl -> ipl
    jugglinglab.jml.PathLink opl -> opl
    int transitiontype -> transitiontype
    void <init>(int,int,java.lang.String,java.lang.String) -> <init>
    int getType() -> getType
    int getPath() -> getPath
    void setPath(int) -> setPath
    java.lang.String getThrowType() -> getThrowType
    java.lang.String getMod() -> getMod
    void setIncomingPathLink(jugglinglab.jml.PathLink) -> setIncomingPathLink
    jugglinglab.jml.PathLink getIncomingPathLink() -> getIncomingPathLink
    void setOutgoingPathLink(jugglinglab.jml.PathLink) -> setOutgoingPathLink
    jugglinglab.jml.PathLink getOutgoingPathLink() -> getOutgoingPathLink
    jugglinglab.jml.JMLTransition duplicate() -> duplicate
    void writeJML(java.io.PrintWriter) -> writeJML
jugglinglab.jml.PathLink -> jugglinglab.jml.PathLink:
    int pathnum -> pathnum
    jugglinglab.jml.JMLEvent startevent -> startevent
    jugglinglab.jml.JMLEvent endevent -> endevent
    java.lang.String throwtype -> throwtype
    java.lang.String mod -> mod
    jugglinglab.path.Path proppath -> proppath
    boolean inhand -> inhand
    int juggler -> juggler
    int hand -> hand
    void <init>(int,jugglinglab.jml.JMLEvent,jugglinglab.jml.JMLEvent) -> <init>
    void setThrow(java.lang.String,java.lang.String) -> setThrow
    void setInHand(int,int) -> setInHand
    jugglinglab.path.Path getPath() -> getPath
    jugglinglab.jml.JMLEvent getStartEvent() -> getStartEvent
    jugglinglab.jml.JMLEvent getEndEvent() -> getEndEvent
    java.lang.String toString() -> toString
jugglinglab.jml.PropDef -> jugglinglab.jml.PropDef:
    java.lang.String proptype -> proptype
    java.lang.String mod -> mod
    jugglinglab.prop.Prop prop -> prop
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    java.lang.String getMod() -> getMod
    void setMod(java.lang.String) -> setMod
    void layoutProp() -> layoutProp
    void writeJML(java.io.PrintWriter) -> writeJML
jugglinglab.jml.VelocityRef -> jugglinglab.jml.VelocityRef:
    int VR_THROW -> VR_THROW
    int VR_CATCH -> VR_CATCH
    int VR_SOFTCATCH -> VR_SOFTCATCH
    jugglinglab.path.Path pp -> pp
    int src -> src
    void <init>(jugglinglab.path.Path,int) -> <init>
    jugglinglab.util.Coordinate getVelocity() -> getVelocity
    int getSource() -> getSource
    void <clinit>() -> <clinit>
jugglinglab.notation.MHNBody -> jugglinglab.notation.a:
    int jugglers -> a
    int[] size -> b
    int[][] coords -> c
    double[][][][] bodypath -> d
    void <init>(java.lang.String) -> <init>
    int getNumberOfJugglers() -> a
    int getPeriod(int) -> a
    int getNumberOfPositions(int,int) -> a
    jugglinglab.jml.JMLPosition getPosition(int,int,int) -> a
jugglinglab.notation.MHNHands -> jugglinglab.notation.b:
    int jugglers -> a
    int[] size -> b
    int[][] coords -> c
    int[][] catches -> d
    double[][][][] handpath -> e
    void <init>(java.lang.String) -> <init>
    int getPeriod(int) -> a
    int getNumberOfCoordinates(int,int) -> a
    int getCatchIndex(int,int) -> b
    jugglinglab.util.Coordinate getCoordinate(int,int,int) -> a
jugglinglab.notation.MHNPattern -> jugglinglab.notation.MHNPattern:
    double bps_default -> bps_default
    double dwell_default -> dwell_default
    double gravity_default -> gravity_default
    double propdiam_default -> propdiam_default
    double bouncefrac_default -> bouncefrac_default
    double squeezebeats_default -> squeezebeats_default
    java.lang.String prop_default -> prop_default
    boolean hold_default -> hold_default
    boolean dwellmax_default -> dwellmax_default
    java.lang.String config -> config
    java.lang.String pattern -> pattern
    double bps_set -> bps_set
    double dwell -> dwell
    double gravity -> gravity
    double propdiam -> propdiam
    double bouncefrac -> bouncefrac
    double squeezebeats -> squeezebeats
    java.lang.String prop -> prop
    java.lang.String[] color -> color
    java.lang.String title -> title
    java.lang.String hss -> hss
    boolean hold -> hold
    boolean dwellmax -> dwellmax
    java.lang.String handspec -> handspec
    double[] dwellarray -> dwellarray
    int numjugglers -> numjugglers
    int numpaths -> numpaths
    int period -> period
    int max_occupancy -> max_occupancy
    jugglinglab.notation.MHNThrow[][][][] th -> th
    jugglinglab.notation.MHNHands hands -> hands
    jugglinglab.notation.MHNBody bodies -> bodies
    int max_throw -> max_throw
    int indexes -> indexes
    java.util.ArrayList symmetry -> symmetry
    double bps -> bps
    double[] samethrowx -> samethrowx
    double[] crossingthrowx -> crossingthrowx
    double[] catchx -> catchx
    double BEATS_ONE_THROW_EARLY -> BEATS_ONE_THROW_EARLY
    double BEATS_AIRTIME_MIN -> BEATS_AIRTIME_MIN
    double BEATS_THROW_CATCH_MIN -> BEATS_THROW_CATCH_MIN
    double BEATS_CATCH_THROW_MIN -> BEATS_CATCH_THROW_MIN
    double SECS_EVENT_GAP_MAX -> SECS_EVENT_GAP_MAX
    double[] throwspersec -> throwspersec
    void <init>() -> <init>
    int getNumberOfJugglers() -> getNumberOfJugglers
    int getNumberOfPaths() -> getNumberOfPaths
    int getPeriod() -> getPeriod
    int getIndexes() -> getIndexes
    int getMaxOccupancy() -> getMaxOccupancy
    jugglinglab.notation.MHNThrow[][][][] getThrows() -> getThrows
    int getNumberOfSymmetries() -> getNumberOfSymmetries
    java.lang.String getPropName() -> getPropName
    void addSymmetry(jugglinglab.notation.MHNSymmetry) -> addSymmetry
    jugglinglab.notation.MHNSymmetry getSymmetry(int) -> getSymmetry
    jugglinglab.notation.MHNPattern fromParameters(jugglinglab.util.ParameterList) -> fromParameters
    java.lang.String toString() -> toString
    void buildJugglingMatrix() -> buildJugglingMatrix
    void findMasterThrows() -> findMasterThrows
    void assignPaths() -> assignPaths
    void addThrowSources() -> addThrowSources
    void setCatchOrder() -> setCatchOrder
    boolean isCatchOrderIncorrect(jugglinglab.notation.MHNThrow,jugglinglab.notation.MHNThrow) -> isCatchOrderIncorrect
    void findDwellWindows() -> findDwellWindows
    jugglinglab.jml.JMLPattern asJMLPattern() -> asJMLPattern
    double calcBps() -> calcBps
    void addPropsToJML(jugglinglab.jml.JMLPattern) -> addPropsToJML
    void addSymmetriesToJML(jugglinglab.jml.JMLPattern) -> addSymmetriesToJML
    void findCatchThrowTimes() -> findCatchThrowTimes
    void addPrimaryEventsToJML(jugglinglab.jml.JMLPattern,boolean[][],boolean[]) -> addPrimaryEventsToJML
    void addJugglerPositionsToJML(jugglinglab.jml.JMLPattern) -> addJugglerPositionsToJML
    void addEventsForUntouchedHandsToJML(jugglinglab.jml.JMLPattern,boolean[][]) -> addEventsForUntouchedHandsToJML
    void addEventsForUntouchedPathsToJML(jugglinglab.jml.JMLPattern,boolean[]) -> addEventsForUntouchedPathsToJML
    void addEventsForGapsToJML(jugglinglab.jml.JMLPattern) -> addEventsForGapsToJML
    void addLocationsForIncompleteEventsToJML(jugglinglab.jml.JMLPattern) -> addLocationsForIncompleteEventsToJML
    void addMissingHoldsToJML(jugglinglab.jml.JMLPattern) -> addMissingHoldsToJML
    void <clinit>() -> <clinit>
jugglinglab.notation.MHNSymmetry -> jugglinglab.notation.MHNSymmetry:
    int type -> type
    int numjugglers -> numjugglers
    jugglinglab.util.Permutation jugglerperm -> jugglerperm
    int delay -> delay
    void <init>(int,int,java.lang.String,int) -> <init>
    int getType() -> getType
    void setType(int) -> setType
    int getNumberOfJugglers() -> getNumberOfJugglers
    jugglinglab.util.Permutation getJugglerPerm() -> getJugglerPerm
    void setJugglerPerm(int,java.lang.String) -> setJugglerPerm
    int getDelay() -> getDelay
    void setDelay(int) -> setDelay
jugglinglab.notation.MHNThrow -> jugglinglab.notation.MHNThrow:
    int juggler -> juggler
    int hand -> hand
    int index -> index
    int slot -> slot
    int targetjuggler -> targetjuggler
    int targethand -> targethand
    int targetindex -> targetindex
    int targetslot -> targetslot
    java.lang.String mod -> mod
    jugglinglab.notation.MHNThrow master -> master
    jugglinglab.notation.MHNThrow source -> source
    jugglinglab.notation.MHNThrow target -> target
    int pathnum -> pathnum
    boolean catching -> catching
    int catchnum -> catchnum
    int dwellwindow -> dwellwindow
    double throwtime -> throwtime
    double catchtime -> catchtime
    int handsindex -> handsindex
    void <init>() -> <init>
    void <init>(int,int,int,int,int,int,int,int,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    boolean isZero() -> isZero
    int throwValue() -> throwValue
    boolean isThrownOne() -> isThrownOne
jugglinglab.notation.Pattern -> jugglinglab.notation.Pattern:
    java.lang.String[] builtinNotations -> builtinNotations
    void <init>() -> <init>
    jugglinglab.notation.Pattern newPattern(java.lang.String) -> newPattern
    java.lang.String getNotationName() -> getNotationName
    jugglinglab.notation.Pattern fromString(java.lang.String) -> fromString
    java.lang.String toString() -> toString
    jugglinglab.jml.JMLPattern asJMLPattern() -> asJMLPattern
    void <clinit>() -> <clinit>
jugglinglab.notation.SiteswapPattern -> jugglinglab.notation.SiteswapPattern:
    boolean oddperiod -> oddperiod
    boolean has_hands_specifier -> has_hands_specifier
    boolean[] right_on_even -> right_on_even
    void <init>() -> <init>
    java.lang.String getNotationName() -> getNotationName
    jugglinglab.notation.SiteswapPattern fromString(java.lang.String) -> fromString
    jugglinglab.notation.SiteswapPattern fromParameters(jugglinglab.util.ParameterList) -> fromParameters
    int getNorepPeriod() -> getNorepPeriod
    void parseSiteswapNotation() -> parseSiteswapNotation
    void doFirstPass(jugglinglab.notation.ssparser.SiteswapTreeItem) -> doFirstPass
    void doSecondPass(jugglinglab.notation.ssparser.SiteswapTreeItem,boolean,int) -> doSecondPass
    void resolveModifiers() -> resolveModifiers
    jugglinglab.notation.MHNPattern fromParameters(jugglinglab.util.ParameterList) -> fromParameters
    jugglinglab.notation.Pattern fromString(java.lang.String) -> fromString
jugglinglab.notation.ssparser.ParseException -> jugglinglab.notation.ssparser.a:
    jugglinglab.notation.ssparser.Token currentToken -> a
    void <init>(jugglinglab.notation.ssparser.Token,int[][],java.lang.String[]) -> <init>
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String initialise(jugglinglab.notation.ssparser.Token,int[][],java.lang.String[]) -> a
    java.lang.String add_escapes(java.lang.String) -> a
jugglinglab.notation.ssparser.SimpleCharStream -> jugglinglab.notation.ssparser.SimpleCharStream:
    int bufsize -> bufsize
    int available -> available
    int tokenBegin -> tokenBegin
    int bufpos -> bufpos
    int[] bufline -> bufline
    int[] bufcolumn -> bufcolumn
    int column -> column
    int line -> line
    boolean prevCharIsCR -> prevCharIsCR
    boolean prevCharIsLF -> prevCharIsLF
    java.io.Reader inputStream -> inputStream
    char[] buffer -> buffer
    int maxNextCharInd -> maxNextCharInd
    int inBuf -> inBuf
    int tabSize -> tabSize
    void ExpandBuff(boolean) -> ExpandBuff
    void FillBuff() -> FillBuff
    char BeginToken() -> BeginToken
    void UpdateLineColumn(char) -> UpdateLineColumn
    char readChar() -> readChar
    int getEndColumn() -> getEndColumn
    int getEndLine() -> getEndLine
    int getBeginColumn() -> getBeginColumn
    int getBeginLine() -> getBeginLine
    void backup(int) -> backup
    void <init>(java.io.Reader,int,int,int) -> <init>
    void <init>(java.io.Reader,int,int) -> <init>
    java.lang.String GetImage() -> GetImage
jugglinglab.notation.ssparser.SiteswapParser -> jugglinglab.notation.ssparser.SiteswapParser:
    int jugglers -> jugglers
    int current_juggler -> current_juggler
    int current_beat -> current_beat
    int current_beat_sub -> current_beat_sub
    jugglinglab.notation.ssparser.SiteswapParserTokenManager token_source -> token_source
    jugglinglab.notation.ssparser.SimpleCharStream jj_input_stream -> jj_input_stream
    jugglinglab.notation.ssparser.Token token -> token
    jugglinglab.notation.ssparser.Token jj_nt -> jj_nt
    int jj_ntk -> jj_ntk
    jugglinglab.notation.ssparser.Token jj_scanpos -> jj_scanpos
    jugglinglab.notation.ssparser.Token jj_lastpos -> jj_lastpos
    int jj_la -> jj_la
    int jj_gen -> jj_gen
    int[] jj_la1 -> jj_la1
    int[] jj_la1_0 -> jj_la1_0
    jugglinglab.notation.ssparser.SiteswapParser$JJCalls[] jj_2_rtns -> jj_2_rtns
    boolean jj_rescan -> jj_rescan
    int jj_gc -> jj_gc
    jugglinglab.notation.ssparser.SiteswapParser$LookaheadSuccess jj_ls -> jj_ls
    java.util.List jj_expentries -> jj_expentries
    int[] jj_expentry -> jj_expentry
    int jj_kind -> jj_kind
    int[] jj_lasttokens -> jj_lasttokens
    int jj_endpos -> jj_endpos
    jugglinglab.notation.ssparser.SiteswapTreeItem parsePattern(java.lang.String) -> parsePattern
    jugglinglab.notation.ssparser.SiteswapTreeItem MakeTree() -> MakeTree
    jugglinglab.notation.ssparser.SiteswapTreeItem Pattern() -> Pattern
    jugglinglab.notation.ssparser.SiteswapTreeItem GroupedPattern() -> GroupedPattern
    jugglinglab.notation.ssparser.SiteswapTreeItem SoloSequence() -> SoloSequence
    jugglinglab.notation.ssparser.SiteswapTreeItem SoloPairedThrow() -> SoloPairedThrow
    jugglinglab.notation.ssparser.SiteswapTreeItem SoloMultiThrow() -> SoloMultiThrow
    jugglinglab.notation.ssparser.SiteswapTreeItem SoloSingleThrow() -> SoloSingleThrow
    jugglinglab.notation.ssparser.SiteswapTreeItem SoloHandSpecifier() -> SoloHandSpecifier
    jugglinglab.notation.ssparser.SiteswapTreeItem PassingSequence() -> PassingSequence
    jugglinglab.notation.ssparser.SiteswapTreeItem PassingGroup() -> PassingGroup
    jugglinglab.notation.ssparser.SiteswapTreeItem PassingThrows() -> PassingThrows
    jugglinglab.notation.ssparser.SiteswapTreeItem PassingPairedThrow() -> PassingPairedThrow
    jugglinglab.notation.ssparser.SiteswapTreeItem PassingMultiThrow() -> PassingMultiThrow
    jugglinglab.notation.ssparser.SiteswapTreeItem PassingSingleThrow() -> PassingSingleThrow
    jugglinglab.notation.ssparser.SiteswapTreeItem PassingHandSpecifier() -> PassingHandSpecifier
    int Number() -> Number
    int Wildcard() -> Wildcard
    java.lang.String Modifier() -> Modifier
    boolean jj_2_1(int) -> jj_2_1
    boolean jj_2_2(int) -> jj_2_2
    boolean jj_2_3(int) -> jj_2_3
    boolean jj_3R_74() -> jj_3R_74
    boolean jj_3R_84() -> jj_3R_84
    boolean jj_3R_14() -> jj_3R_14
    boolean jj_3_2() -> jj_3_2
    boolean jj_3R_73() -> jj_3R_73
    boolean jj_3R_68() -> jj_3R_68
    boolean jj_3R_79() -> jj_3R_79
    boolean jj_3R_83() -> jj_3R_83
    boolean jj_3R_82() -> jj_3R_82
    boolean jj_3R_81() -> jj_3R_81
    boolean jj_3R_77() -> jj_3R_77
    boolean jj_3R_52() -> jj_3R_52
    boolean jj_3R_80() -> jj_3R_80
    boolean jj_3R_71() -> jj_3R_71
    boolean jj_3R_21() -> jj_3R_21
    boolean jj_3R_13() -> jj_3R_13
    boolean jj_3R_70() -> jj_3R_70
    boolean jj_3_1() -> jj_3_1
    boolean jj_3R_54() -> jj_3R_54
    boolean jj_3R_44() -> jj_3R_44
    boolean jj_3R_43() -> jj_3R_43
    boolean jj_3R_42() -> jj_3R_42
    boolean jj_3R_76() -> jj_3R_76
    boolean jj_3R_45() -> jj_3R_45
    boolean jj_3R_41() -> jj_3R_41
    boolean jj_3R_29() -> jj_3R_29
    boolean jj_3R_69() -> jj_3R_69
    boolean jj_3R_30() -> jj_3R_30
    boolean jj_3R_28() -> jj_3R_28
    boolean jj_3R_40() -> jj_3R_40
    boolean jj_3R_39() -> jj_3R_39
    boolean jj_3R_20() -> jj_3R_20
    boolean jj_3R_53() -> jj_3R_53
    boolean jj_3R_35() -> jj_3R_35
    boolean jj_3R_27() -> jj_3R_27
    boolean jj_3R_34() -> jj_3R_34
    boolean jj_3R_67() -> jj_3R_67
    boolean jj_3R_66() -> jj_3R_66
    boolean jj_3R_72() -> jj_3R_72
    boolean jj_3R_64() -> jj_3R_64
    boolean jj_3R_63() -> jj_3R_63
    boolean jj_3R_65() -> jj_3R_65
    boolean jj_3R_24() -> jj_3R_24
    boolean jj_3R_62() -> jj_3R_62
    boolean jj_3R_60() -> jj_3R_60
    boolean jj_3R_58() -> jj_3R_58
    boolean jj_3R_61() -> jj_3R_61
    boolean jj_3R_57() -> jj_3R_57
    boolean jj_3R_59() -> jj_3R_59
    boolean jj_3R_56() -> jj_3R_56
    boolean jj_3R_55() -> jj_3R_55
    boolean jj_3R_49() -> jj_3R_49
    boolean jj_3R_51() -> jj_3R_51
    boolean jj_3R_46() -> jj_3R_46
    boolean jj_3R_48() -> jj_3R_48
    boolean jj_3R_50() -> jj_3R_50
    boolean jj_3R_38() -> jj_3R_38
    boolean jj_3R_47() -> jj_3R_47
    boolean jj_3R_33() -> jj_3R_33
    boolean jj_3R_19() -> jj_3R_19
    boolean jj_3R_37() -> jj_3R_37
    boolean jj_3R_36() -> jj_3R_36
    boolean jj_3R_32() -> jj_3R_32
    boolean jj_3R_31() -> jj_3R_31
    boolean jj_3R_25() -> jj_3R_25
    boolean jj_3R_16() -> jj_3R_16
    boolean jj_3R_22() -> jj_3R_22
    boolean jj_3R_18() -> jj_3R_18
    boolean jj_3R_87() -> jj_3R_87
    boolean jj_3R_26() -> jj_3R_26
    boolean jj_3R_88() -> jj_3R_88
    boolean jj_3R_15() -> jj_3R_15
    boolean jj_3R_23() -> jj_3R_23
    boolean jj_3R_86() -> jj_3R_86
    boolean jj_3R_75() -> jj_3R_75
    boolean jj_3R_85() -> jj_3R_85
    boolean jj_3R_17() -> jj_3R_17
    boolean jj_3_3() -> jj_3_3
    boolean jj_3R_78() -> jj_3R_78
    void jj_la1_init_0() -> jj_la1_init_0
    void <init>(java.io.Reader) -> <init>
    jugglinglab.notation.ssparser.Token jj_consume_token(int) -> jj_consume_token
    boolean jj_scan_token(int) -> jj_scan_token
    int jj_ntk() -> jj_ntk
    void jj_add_error_token(int,int) -> jj_add_error_token
    jugglinglab.notation.ssparser.ParseException generateParseException() -> generateParseException
    void jj_rescan_token() -> jj_rescan_token
    void jj_save(int,int) -> jj_save
    void <clinit>() -> <clinit>
jugglinglab.notation.ssparser.SiteswapParser$1 -> jugglinglab.notation.ssparser.b:
jugglinglab.notation.ssparser.SiteswapParser$JJCalls -> jugglinglab.notation.ssparser.SiteswapParser$JJCalls:
    int gen -> gen
    jugglinglab.notation.ssparser.Token first -> first
    int arg -> arg
    jugglinglab.notation.ssparser.SiteswapParser$JJCalls next -> next
    void <init>() -> <init>
jugglinglab.notation.ssparser.SiteswapParser$LookaheadSuccess -> jugglinglab.notation.ssparser.SiteswapParser$LookaheadSuccess:
    void <init>() -> <init>
    void <init>(jugglinglab.notation.ssparser.SiteswapParser$1) -> <init>
jugglinglab.notation.ssparser.SiteswapParserConstants -> jugglinglab.notation.ssparser.c:
    java.lang.String[] tokenImage -> a
    void <clinit>() -> <clinit>
jugglinglab.notation.ssparser.SiteswapParserTokenManager -> jugglinglab.notation.ssparser.SiteswapParserTokenManager:
    java.io.PrintStream debugStream -> debugStream
    int[] jjnextStates -> jjnextStates
    java.lang.String[] jjstrLiteralImages -> jjstrLiteralImages
    java.lang.String[] lexStateNames -> lexStateNames
    long[] jjtoToken -> jjtoToken
    long[] jjtoSkip -> jjtoSkip
    jugglinglab.notation.ssparser.SimpleCharStream input_stream -> input_stream
    int[] jjrounds -> jjrounds
    int[] jjstateSet -> jjstateSet
    char curChar -> curChar
    int curLexState -> curLexState
    int defaultLexState -> defaultLexState
    int jjnewStateCnt -> jjnewStateCnt
    int jjround -> jjround
    int jjmatchedPos -> jjmatchedPos
    int jjmatchedKind -> jjmatchedKind
    int jjStopAtPos(int,int) -> jjStopAtPos
    int jjMoveStringLiteralDfa0_0() -> jjMoveStringLiteralDfa0_0
    int jjMoveNfa_0(int,int) -> jjMoveNfa_0
    void <init>(jugglinglab.notation.ssparser.SimpleCharStream) -> <init>
    void ReInitRounds() -> ReInitRounds
    jugglinglab.notation.ssparser.Token jjFillToken() -> jjFillToken
    jugglinglab.notation.ssparser.Token getNextToken() -> getNextToken
    void jjCheckNAdd(int) -> jjCheckNAdd
    void <clinit>() -> <clinit>
jugglinglab.notation.ssparser.SiteswapTreeItem -> jugglinglab.notation.ssparser.SiteswapTreeItem:
    int type -> type
    java.util.ArrayList children -> children
    int jugglers -> jugglers
    int repeats -> repeats
    boolean switchrepeat -> switchrepeat
    int beats -> beats
    int seq_beatnum -> seq_beatnum
    int source_juggler -> source_juggler
    int value -> value
    boolean x -> x
    int dest_juggler -> dest_juggler
    java.lang.String mod -> mod
    boolean spec_left -> spec_left
    int throw_sum -> throw_sum
    int beatnum -> beatnum
    boolean left -> left
    boolean vanilla_async -> vanilla_async
    boolean sync_throw -> sync_throw
    jugglinglab.notation.ssparser.SiteswapTreeItem transition -> transition
    java.lang.String[] typenames -> typenames
    int[][] field_defined_types -> field_defined_types
    void <init>(int) -> <init>
    void addChild(jugglinglab.notation.ssparser.SiteswapTreeItem) -> addChild
    jugglinglab.notation.ssparser.SiteswapTreeItem getChild(int) -> getChild
    void removeChildren() -> removeChildren
    int getNumberOfChildren() -> getNumberOfChildren
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    boolean field_active(int,int) -> field_active
    void <clinit>() -> <clinit>
jugglinglab.notation.ssparser.Token -> jugglinglab.notation.ssparser.Token:
    int kind -> kind
    int beginLine -> beginLine
    int beginColumn -> beginColumn
    int endLine -> endLine
    int endColumn -> endColumn
    java.lang.String image -> image
    jugglinglab.notation.ssparser.Token next -> next
    void <init>() -> <init>
    void <init>(int,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    jugglinglab.notation.ssparser.Token newToken(int,java.lang.String) -> newToken
jugglinglab.notation.ssparser.TokenMgrError -> jugglinglab.notation.ssparser.d:
    java.lang.String addEscapes(java.lang.String) -> a
    java.lang.String getMessage() -> getMessage
    void <init>() -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(boolean,int,int,int,java.lang.String,char,int) -> <init>
jugglinglab.path.BouncePath -> jugglinglab.path.a:
    double bx -> a
    double cx -> b
    double by -> c
    double cy -> d
    double[] az -> e
    double[] bz -> f
    double[] cz -> g
    double[] endtime -> h
    int bounces -> i
    boolean forced -> j
    boolean hyper -> k
    double bounceplane -> l
    double g -> m
    double bouncefracsqrt -> n
    int numbounces -> o
    void <init>() -> <init>
    void initPath(java.lang.String) -> initPath
    void calcPath() -> calcPath
    int solveBounceEquation(int,double,double[],boolean[]) -> a
    boolean isFeasibleDuration(double) -> a
    double getMinDuration() -> getMinDuration
    jugglinglab.util.Coordinate getStartVelocity() -> getStartVelocity
    jugglinglab.util.Coordinate getEndVelocity() -> getEndVelocity
    void getCoordinate(double,jugglinglab.util.Coordinate) -> getCoordinate
    jugglinglab.util.Coordinate getMax2(double,double) -> getMax2
    jugglinglab.util.Coordinate getMin2(double,double) -> getMin2
    double evalPolynomial(double[],int,double) -> a
    double bracketOpenInterval(double[],int,double,boolean) -> a
    double findRoot(double[],int,double,double) -> a
    int findRealRootsPolynomial(double[],int,double[]) -> a
jugglinglab.path.Path -> jugglinglab.path.Path:
    double start_time -> start_time
    double end_time -> end_time
    jugglinglab.util.Coordinate start_coord -> start_coord
    jugglinglab.util.Coordinate end_coord -> end_coord
    java.lang.String[] builtinPaths -> builtinPaths
    void <init>() -> <init>
    jugglinglab.path.Path newPath(java.lang.String) -> newPath
    void setStart(jugglinglab.util.Coordinate,double) -> setStart
    void setEnd(jugglinglab.util.Coordinate,double) -> setEnd
    double getDuration() -> getDuration
    double getMinDuration() -> getMinDuration
    jugglinglab.util.Coordinate getMax() -> getMax
    jugglinglab.util.Coordinate getMin() -> getMin
    jugglinglab.util.Coordinate check(jugglinglab.util.Coordinate,double,boolean) -> check
    void initPath(java.lang.String) -> initPath
    void calcPath() -> calcPath
    jugglinglab.util.Coordinate getStartVelocity() -> getStartVelocity
    jugglinglab.util.Coordinate getEndVelocity() -> getEndVelocity
    void getCoordinate(double,jugglinglab.util.Coordinate) -> getCoordinate
    jugglinglab.util.Coordinate getMax2(double,double) -> getMax2
    jugglinglab.util.Coordinate getMin2(double,double) -> getMin2
    void <clinit>() -> <clinit>
jugglinglab.path.TossPath -> jugglinglab.path.TossPath:
    double bx -> bx
    double cx -> cx
    double by -> by
    double cy -> cy
    double az -> az
    double bz -> bz
    double cz -> cz
    double g -> g
    void <init>() -> <init>
    void initPath(java.lang.String) -> initPath
    void calcPath() -> calcPath
    jugglinglab.util.Coordinate getStartVelocity() -> getStartVelocity
    jugglinglab.util.Coordinate getEndVelocity() -> getEndVelocity
    void getCoordinate(double,jugglinglab.util.Coordinate) -> getCoordinate
    jugglinglab.util.Coordinate getMax2(double,double) -> getMax2
    jugglinglab.util.Coordinate getMin2(double,double) -> getMin2
jugglinglab.prop.BallProp -> jugglinglab.prop.BallProp:
    java.lang.String[] colornames -> colornames
    alternatives.Color[] colorvals -> colorvals
    double diam -> diam
    int colornum -> colornum
    alternatives.Color color -> color
    boolean highlight -> highlight
    void <init>() -> <init>
    void init(java.lang.String) -> init
    void <clinit>() -> <clinit>
jugglinglab.prop.Prop -> jugglinglab.prop.Prop:
    java.lang.String initString -> initString
    java.lang.String[] builtinProps -> builtinProps
    void <init>() -> <init>
    jugglinglab.prop.Prop newProp(java.lang.String) -> newProp
    void initProp(java.lang.String) -> initProp
    void init(java.lang.String) -> init
    void <clinit>() -> <clinit>
jugglinglab.protos.PatternOuterClass -> jugglinglab.a.a:
jugglinglab.protos.PatternOuterClass$1 -> jugglinglab.a.b:
    int[] $SwitchMap$com$google$protobuf$GeneratedMessageLite$MethodToInvoke -> a
    void <clinit>() -> <clinit>
jugglinglab.protos.PatternOuterClass$Path -> jugglinglab.a.c:
    jugglinglab.protos.PatternOuterClass$Path DEFAULT_INSTANCE -> c
    com.google.protobuf.Parser PARSER -> d
    void <init>() -> <init>
    jugglinglab.protos.PatternOuterClass$Path$Builder newBuilder() -> o
    java.lang.Object dynamicMethod$1f92504(com.google.protobuf.GeneratedMessageLite$MethodToInvoke) -> a
    jugglinglab.protos.PatternOuterClass$Path access$800() -> p
    void access$900(jugglinglab.protos.PatternOuterClass$Path,double) -> a
    void access$1100(jugglinglab.protos.PatternOuterClass$Path,double) -> b
    void access$1400(jugglinglab.protos.PatternOuterClass$Path,jugglinglab.protos.PatternOuterClass$Vec3$Builder) -> a
    void access$1800(jugglinglab.protos.PatternOuterClass$Path,jugglinglab.protos.PatternOuterClass$Vec3$Builder) -> b
    void access$2200(jugglinglab.protos.PatternOuterClass$Path,jugglinglab.protos.PatternOuterClass$Vec3$Builder) -> c
    void <clinit>() -> <clinit>
jugglinglab.protos.PatternOuterClass$Path$Builder -> jugglinglab.a.d:
    void <init>() -> <init>
    jugglinglab.protos.PatternOuterClass$Path$Builder setStartTime(double) -> a
    jugglinglab.protos.PatternOuterClass$Path$Builder setEndTime(double) -> b
    jugglinglab.protos.PatternOuterClass$Path$Builder setStart(jugglinglab.protos.PatternOuterClass$Vec3$Builder) -> a
    jugglinglab.protos.PatternOuterClass$Path$Builder setVel(jugglinglab.protos.PatternOuterClass$Vec3$Builder) -> b
    jugglinglab.protos.PatternOuterClass$Path$Builder setAcc(jugglinglab.protos.PatternOuterClass$Vec3$Builder) -> c
    void <init>(byte) -> <init>
jugglinglab.protos.PatternOuterClass$PathOrBuilder -> jugglinglab.a.e:
jugglinglab.protos.PatternOuterClass$Pattern -> jugglinglab.a.f:
    com.google.protobuf.Internal$ProtobufList paths_ -> c
    jugglinglab.protos.PatternOuterClass$Pattern DEFAULT_INSTANCE -> d
    com.google.protobuf.Parser PARSER -> e
    void <init>() -> <init>
    jugglinglab.protos.PatternOuterClass$Pattern$Builder newBuilder() -> o
    java.lang.Object dynamicMethod$1f92504(com.google.protobuf.GeneratedMessageLite$MethodToInvoke) -> a
    jugglinglab.protos.PatternOuterClass$Pattern access$2600() -> p
    void access$2700(jugglinglab.protos.PatternOuterClass$Pattern,jugglinglab.protos.PatternOuterClass$Vec3) -> a
    void access$3100(jugglinglab.protos.PatternOuterClass$Pattern,jugglinglab.protos.PatternOuterClass$Vec3) -> b
    void access$3900(jugglinglab.protos.PatternOuterClass$Pattern,jugglinglab.protos.PatternOuterClass$Path$Builder) -> a
    void <clinit>() -> <clinit>
jugglinglab.protos.PatternOuterClass$Pattern$Builder -> jugglinglab.a.g:
    void <init>() -> <init>
    jugglinglab.protos.PatternOuterClass$Pattern$Builder setMin(jugglinglab.protos.PatternOuterClass$Vec3) -> a
    jugglinglab.protos.PatternOuterClass$Pattern$Builder setMax(jugglinglab.protos.PatternOuterClass$Vec3) -> b
    jugglinglab.protos.PatternOuterClass$Pattern$Builder addPaths(jugglinglab.protos.PatternOuterClass$Path$Builder) -> a
    void <init>(byte) -> <init>
jugglinglab.protos.PatternOuterClass$Vec3 -> jugglinglab.a.h:
    jugglinglab.protos.PatternOuterClass$Vec3 DEFAULT_INSTANCE -> c
    com.google.protobuf.Parser PARSER -> d
    void <init>() -> <init>
    jugglinglab.protos.PatternOuterClass$Vec3$Builder newBuilder() -> o
    java.lang.Object dynamicMethod$1f92504(com.google.protobuf.GeneratedMessageLite$MethodToInvoke) -> a
    jugglinglab.protos.PatternOuterClass$Vec3 access$000() -> p
    void access$100(jugglinglab.protos.PatternOuterClass$Vec3,double) -> a
    void access$300(jugglinglab.protos.PatternOuterClass$Vec3,double) -> b
    void access$500(jugglinglab.protos.PatternOuterClass$Vec3,double) -> c
    void <clinit>() -> <clinit>
jugglinglab.protos.PatternOuterClass$Vec3$Builder -> jugglinglab.a.i:
    void <init>() -> <init>
    jugglinglab.protos.PatternOuterClass$Vec3$Builder setX(double) -> a
    jugglinglab.protos.PatternOuterClass$Vec3$Builder setY(double) -> b
    jugglinglab.protos.PatternOuterClass$Vec3$Builder setZ(double) -> c
    void <init>(byte) -> <init>
jugglinglab.util.Coordinate -> jugglinglab.util.Coordinate:
    double x -> x
    double y -> y
    double z -> z
    void <init>() -> <init>
    void <init>(double,double,double) -> <init>
    void <init>(jugglinglab.util.Coordinate) -> <init>
    void setCoordinate(double,double,double) -> setCoordinate
    double getIndex(int) -> getIndex
    void setIndex(int,double) -> setIndex
    jugglinglab.util.Coordinate max(jugglinglab.util.Coordinate,jugglinglab.util.Coordinate) -> max
    jugglinglab.util.Coordinate min(jugglinglab.util.Coordinate,jugglinglab.util.Coordinate) -> min
    java.lang.String toString() -> toString
jugglinglab.util.JLFunc -> jugglinglab.util.JLFunc:
    java.text.NumberFormat nf -> nf
    void <init>() -> <init>
    java.lang.String expandRepeats(java.lang.String) -> expandRepeats
    void addExpansionToBuffer(java.lang.String,java.lang.StringBuffer) -> addExpansionToBuffer
    int[] tryParseRepeat(java.lang.String,int) -> tryParseRepeat
    java.text.NumberFormat nf() -> nf
    double parseDouble(java.lang.String) -> parseDouble
    java.lang.String toStringRounded(double,int) -> toStringRounded
jugglinglab.util.JuggleException -> jugglinglab.util.a:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
jugglinglab.util.JuggleExceptionInternal -> jugglinglab.util.b:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
jugglinglab.util.JuggleExceptionUser -> jugglinglab.util.c:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
jugglinglab.util.ParameterList -> jugglinglab.util.ParameterList:
    int size -> size
    java.util.ArrayList names -> names
    java.util.ArrayList values -> values
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    boolean addParameter(java.lang.String,java.lang.String) -> addParameter
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String removeParameter(java.lang.String) -> removeParameter
    java.lang.String getParameterName(int) -> getParameterName
    java.lang.String getParameterValue(int) -> getParameterValue
    int getNumberOfParameters() -> getNumberOfParameters
    void readParameters(java.lang.String) -> readParameters
    java.lang.String toString() -> toString
    void errorIfParametersLeft() -> errorIfParametersLeft
jugglinglab.util.Permutation -> jugglinglab.util.Permutation:
    int size -> size
    int[] mapping -> mapping
    boolean reverses -> reverses
    void <init>(int,boolean) -> <init>
    void <init>(int,int[],boolean) -> <init>
    void <init>(int,java.lang.String,boolean) -> <init>
    java.lang.String toString() -> toString
    java.lang.String toString(boolean) -> toString
    java.lang.String convertReverse(int) -> convertReverse
    int getSize() -> getSize
    boolean hasReverses() -> hasReverses
    boolean equals(jugglinglab.util.Permutation) -> equals
    int getMapping(int) -> getMapping
    int getMapping(int,int) -> getMapping
    jugglinglab.util.Permutation apply(jugglinglab.util.Permutation) -> apply
    int getInverseMapping(int) -> getInverseMapping
    jugglinglab.util.Permutation getInverse() -> getInverse
    int lcm(int,int) -> lcm
    int getOrder() -> getOrder
    int getOrder(int) -> getOrder
    int[] getCycle(int) -> getCycle
org.apache.commons.math3.exception.DimensionMismatchException -> org.apache.commons.math3.a.a:
    void <init>(org.apache.commons.math3.exception.util.Localizable,int,int) -> <init>
    void <init>(int,int) -> <init>
org.apache.commons.math3.exception.MathIllegalArgumentException -> org.apache.commons.math3.a.b:
    org.apache.commons.math3.exception.util.ExceptionContext context -> a
    void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[]) -> <init>
    java.lang.String getMessage() -> getMessage
    java.lang.String getLocalizedMessage() -> getLocalizedMessage
org.apache.commons.math3.exception.MathIllegalNumberException -> org.apache.commons.math3.a.c:
    void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[]) -> <init>
    void <clinit>() -> <clinit>
org.apache.commons.math3.exception.MathIllegalStateException -> org.apache.commons.math3.a.d:
    org.apache.commons.math3.exception.util.ExceptionContext context -> a
    void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[]) -> <init>
    void <init>() -> <init>
    java.lang.String getMessage() -> getMessage
    java.lang.String getLocalizedMessage() -> getLocalizedMessage
org.apache.commons.math3.exception.MathUnsupportedOperationException -> org.apache.commons.math3.a.e:
    org.apache.commons.math3.exception.util.ExceptionContext context -> a
    void <init>() -> <init>
    void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[]) -> <init>
    java.lang.String getMessage() -> getMessage
    java.lang.String getLocalizedMessage() -> getLocalizedMessage
org.apache.commons.math3.exception.NoDataException -> org.apache.commons.math3.a.f:
    void <init>() -> <init>
    void <init>(org.apache.commons.math3.exception.util.Localizable) -> <init>
org.apache.commons.math3.exception.NullArgumentException -> org.apache.commons.math3.a.g:
    void <init>() -> <init>
    void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[]) -> <init>
org.apache.commons.math3.exception.OutOfRangeException -> org.apache.commons.math3.a.h:
    void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number) -> <init>
org.apache.commons.math3.exception.util.ArgUtils -> org.apache.commons.math3.a.a.a:
    java.lang.Object[] flatten(java.lang.Object[]) -> a
org.apache.commons.math3.exception.util.ExceptionContext -> org.apache.commons.math3.a.a.b:
    java.util.List msgPatterns -> a
    java.util.List msgArguments -> b
    void <init>(java.lang.Throwable) -> <init>
    void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[]) -> a
    java.lang.String getMessage() -> a
    java.lang.String getLocalizedMessage() -> b
    java.lang.String buildMessage(java.util.Locale,java.lang.String) -> a
org.apache.commons.math3.exception.util.Localizable -> org.apache.commons.math3.a.a.c:
    java.lang.String getLocalizedString(java.util.Locale) -> a
org.apache.commons.math3.exception.util.LocalizedFormats -> org.apache.commons.math3.a.a.d:
    org.apache.commons.math3.exception.util.LocalizedFormats ARGUMENT_OUTSIDE_DOMAIN -> o
    org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_SIZE_EXCEEDS_MAX_VARIABLES -> p
    org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1 -> q
    org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_SUMS_TO_ZERO -> r
    org.apache.commons.math3.exception.util.LocalizedFormats ASSYMETRIC_EIGEN_NOT_SUPPORTED -> s
    org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN -> a
    org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW -> b
    org.apache.commons.math3.exception.util.LocalizedFormats BANDWIDTH -> t
    org.apache.commons.math3.exception.util.LocalizedFormats BESSEL_FUNCTION_BAD_ARGUMENT -> u
    org.apache.commons.math3.exception.util.LocalizedFormats BESSEL_FUNCTION_FAILED_CONVERGENCE -> v
    org.apache.commons.math3.exception.util.LocalizedFormats BINOMIAL_INVALID_PARAMETERS_ORDER -> w
    org.apache.commons.math3.exception.util.LocalizedFormats BINOMIAL_NEGATIVE_PARAMETER -> x
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS -> y
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_COMPUTE_0TH_ROOT_OF_UNITY -> z
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA -> A
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA -> B
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N -> C
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS -> D
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR -> E
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_FORMAT_INSTANCE_AS_COMPLEX -> F
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR -> G
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_FORMAT_OBJECT_TO_FRACTION -> H
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS -> I
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR -> J
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_RETRIEVE_AT_NEGATIVE_INDEX -> K
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_SET_AT_NEGATIVE_INDEX -> L
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY -> M
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_TRANSFORM_TO_DOUBLE -> N
    org.apache.commons.math3.exception.util.LocalizedFormats CARDAN_ANGLES_SINGULARITY -> O
    org.apache.commons.math3.exception.util.LocalizedFormats CLASS_DOESNT_IMPLEMENT_COMPARABLE -> P
    org.apache.commons.math3.exception.util.LocalizedFormats CLOSE_VERTICES -> Q
    org.apache.commons.math3.exception.util.LocalizedFormats CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT -> R
    org.apache.commons.math3.exception.util.LocalizedFormats COLUMN_INDEX_OUT_OF_RANGE -> S
    org.apache.commons.math3.exception.util.LocalizedFormats COLUMN_INDEX -> c
    org.apache.commons.math3.exception.util.LocalizedFormats CONSTRAINT -> T
    org.apache.commons.math3.exception.util.LocalizedFormats CONTINUED_FRACTION_INFINITY_DIVERGENCE -> U
    org.apache.commons.math3.exception.util.LocalizedFormats CONTINUED_FRACTION_NAN_DIVERGENCE -> V
    org.apache.commons.math3.exception.util.LocalizedFormats CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR -> W
    org.apache.commons.math3.exception.util.LocalizedFormats CONTRACTION_CRITERIA_SMALLER_THAN_ONE -> X
    org.apache.commons.math3.exception.util.LocalizedFormats CONVERGENCE_FAILED -> Y
    org.apache.commons.math3.exception.util.LocalizedFormats CROSSING_BOUNDARY_LOOPS -> Z
    org.apache.commons.math3.exception.util.LocalizedFormats CROSSOVER_RATE -> aa
    org.apache.commons.math3.exception.util.LocalizedFormats CUMULATIVE_PROBABILITY_RETURNED_NAN -> ab
    org.apache.commons.math3.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS -> ac
    org.apache.commons.math3.exception.util.LocalizedFormats DIFFERENT_ORIG_AND_PERMUTED_DATA -> ad
    org.apache.commons.math3.exception.util.LocalizedFormats DIGEST_NOT_INITIALIZED -> ae
    org.apache.commons.math3.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2 -> af
    org.apache.commons.math3.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE -> d
    org.apache.commons.math3.exception.util.LocalizedFormats DIMENSIONS_MISMATCH -> ag
    org.apache.commons.math3.exception.util.LocalizedFormats DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN -> ah
    org.apache.commons.math3.exception.util.LocalizedFormats DISTRIBUTION_NOT_LOADED -> ai
    org.apache.commons.math3.exception.util.LocalizedFormats DUPLICATED_ABSCISSA_DIVISION_BY_ZERO -> aj
    org.apache.commons.math3.exception.util.LocalizedFormats EDGE_CONNECTED_TO_ONE_FACET -> ak
    org.apache.commons.math3.exception.util.LocalizedFormats ELITISM_RATE -> al
    org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS -> am
    org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_INTERPOLATION_SAMPLE -> an
    org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY -> ao
    org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_SELECTED_COLUMN_INDEX_ARRAY -> ap
    org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_SELECTED_ROW_INDEX_ARRAY -> aq
    org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_STRING_FOR_IMAGINARY_CHARACTER -> ar
    org.apache.commons.math3.exception.util.LocalizedFormats ENDPOINTS_NOT_AN_INTERVAL -> as
    org.apache.commons.math3.exception.util.LocalizedFormats EQUAL_VERTICES_IN_SIMPLEX -> at
    org.apache.commons.math3.exception.util.LocalizedFormats EULER_ANGLES_SINGULARITY -> au
    org.apache.commons.math3.exception.util.LocalizedFormats EVALUATION -> av
    org.apache.commons.math3.exception.util.LocalizedFormats EXPANSION_FACTOR_SMALLER_THAN_ONE -> aw
    org.apache.commons.math3.exception.util.LocalizedFormats FACET_ORIENTATION_MISMATCH -> ax
    org.apache.commons.math3.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER -> ay
    org.apache.commons.math3.exception.util.LocalizedFormats FAILED_BRACKETING -> az
    org.apache.commons.math3.exception.util.LocalizedFormats FAILED_FRACTION_CONVERSION -> aA
    org.apache.commons.math3.exception.util.LocalizedFormats FIRST_COLUMNS_NOT_INITIALIZED_YET -> e
    org.apache.commons.math3.exception.util.LocalizedFormats FIRST_ELEMENT_NOT_ZERO -> aB
    org.apache.commons.math3.exception.util.LocalizedFormats FIRST_ROWS_NOT_INITIALIZED_YET -> f
    org.apache.commons.math3.exception.util.LocalizedFormats FRACTION_CONVERSION_OVERFLOW -> aC
    org.apache.commons.math3.exception.util.LocalizedFormats FUNCTION_NOT_DIFFERENTIABLE -> aD
    org.apache.commons.math3.exception.util.LocalizedFormats FUNCTION_NOT_POLYNOMIAL -> aE
    org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_32_BITS -> aF
    org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_64_BITS -> aG
    org.apache.commons.math3.exception.util.LocalizedFormats HOLE_BETWEEN_MODELS_TIME_RANGES -> aH
    org.apache.commons.math3.exception.util.LocalizedFormats ILL_CONDITIONED_OPERATOR -> aI
    org.apache.commons.math3.exception.util.LocalizedFormats INCONSISTENT_STATE_AT_2_PI_WRAPPING -> aJ
    org.apache.commons.math3.exception.util.LocalizedFormats INDEX_LARGER_THAN_MAX -> aK
    org.apache.commons.math3.exception.util.LocalizedFormats INDEX_NOT_POSITIVE -> aL
    org.apache.commons.math3.exception.util.LocalizedFormats INDEX_OUT_OF_RANGE -> aM
    org.apache.commons.math3.exception.util.LocalizedFormats INDEX -> g
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_FINITE_NUMBER -> aN
    org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_BOUND -> aO
    org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_ELEMENT -> aP
    org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_ARRAY_ELEMENT -> aQ
    org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_VALUE_CONVERSION -> aR
    org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_CAPACITY_NOT_POSITIVE -> aS
    org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_COLUMN_AFTER_FINAL_COLUMN -> aT
    org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_ROW_AFTER_FINAL_ROW -> aU
    org.apache.commons.math3.exception.util.LocalizedFormats INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE -> aV
    org.apache.commons.math3.exception.util.LocalizedFormats INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES -> aW
    org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_DATA -> aX
    org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_DATA_FOR_T_STATISTIC -> aY
    org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION -> aZ
    org.apache.commons.math3.exception.util.LocalizedFormats DIMENSION -> ba
    org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE -> bb
    org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_ROWS_AND_COLUMNS -> bc
    org.apache.commons.math3.exception.util.LocalizedFormats INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS -> bd
    org.apache.commons.math3.exception.util.LocalizedFormats INTERNAL_ERROR -> be
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_BINARY_DIGIT -> bf
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_BINARY_CHROMOSOME -> bg
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_BRACKETING_PARAMETERS -> bh
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_FIXED_LENGTH_CHROMOSOME -> bi
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_IMPLEMENTATION -> bj
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS -> bk
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_ITERATIONS_LIMITS -> bl
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_MAX_ITERATIONS -> bm
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_REGRESSION -> bn
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_REGRESSION_ARRAY -> bo
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_REGRESSION_OBSERVATION -> bp
    org.apache.commons.math3.exception.util.LocalizedFormats INVALID_ROUNDING_METHOD -> bq
    org.apache.commons.math3.exception.util.LocalizedFormats ITERATOR_EXHAUSTED -> br
    org.apache.commons.math3.exception.util.LocalizedFormats ITERATIONS -> bs
    org.apache.commons.math3.exception.util.LocalizedFormats LCM_OVERFLOW_32_BITS -> bt
    org.apache.commons.math3.exception.util.LocalizedFormats LCM_OVERFLOW_64_BITS -> bu
    org.apache.commons.math3.exception.util.LocalizedFormats LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE -> bv
    org.apache.commons.math3.exception.util.LocalizedFormats LOESS_EXPECTS_AT_LEAST_ONE_POINT -> bw
    org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND -> bx
    org.apache.commons.math3.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT -> by
    org.apache.commons.math3.exception.util.LocalizedFormats MAP_MODIFIED_WHILE_ITERATING -> bz
    org.apache.commons.math3.exception.util.LocalizedFormats MULTISTEP_STARTER_STOPPED_EARLY -> bA
    org.apache.commons.math3.exception.util.LocalizedFormats EVALUATIONS -> bB
    org.apache.commons.math3.exception.util.LocalizedFormats MAX_COUNT_EXCEEDED -> bC
    org.apache.commons.math3.exception.util.LocalizedFormats MAX_ITERATIONS_EXCEEDED -> bD
    org.apache.commons.math3.exception.util.LocalizedFormats MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION -> bE
    org.apache.commons.math3.exception.util.LocalizedFormats MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS -> bF
    org.apache.commons.math3.exception.util.LocalizedFormats MUTATION_RATE -> bG
    org.apache.commons.math3.exception.util.LocalizedFormats NAN_ELEMENT_AT_INDEX -> bH
    org.apache.commons.math3.exception.util.LocalizedFormats NAN_VALUE_CONVERSION -> bI
    org.apache.commons.math3.exception.util.LocalizedFormats NEGATIVE_BRIGHTNESS_EXPONENT -> bJ
    org.apache.commons.math3.exception.util.LocalizedFormats NEGATIVE_COMPLEX_MODULE -> bK
    org.apache.commons.math3.exception.util.LocalizedFormats NEGATIVE_ELEMENT_AT_2D_INDEX -> bL
    org.apache.commons.math3.exception.util.LocalizedFormats NEGATIVE_ELEMENT_AT_INDEX -> bM
    org.apache.commons.math3.exception.util.LocalizedFormats NEGATIVE_NUMBER_OF_SUCCESSES -> bN
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SUCCESSES -> bO
    org.apache.commons.math3.exception.util.LocalizedFormats NEGATIVE_NUMBER_OF_TRIALS -> bP
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_INTERPOLATION_POINTS -> bQ
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_TRIALS -> bR
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_CONVEX -> bS
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_CONVEX_HYPERPLANES -> bT
    org.apache.commons.math3.exception.util.LocalizedFormats ROBUSTNESS_ITERATIONS -> bU
    org.apache.commons.math3.exception.util.LocalizedFormats START_POSITION -> bV
    org.apache.commons.math3.exception.util.LocalizedFormats NON_CONVERGENT_CONTINUED_FRACTION -> bW
    org.apache.commons.math3.exception.util.LocalizedFormats NON_INVERTIBLE_TRANSFORM -> bX
    org.apache.commons.math3.exception.util.LocalizedFormats NON_POSITIVE_MICROSPHERE_ELEMENTS -> bY
    org.apache.commons.math3.exception.util.LocalizedFormats NON_POSITIVE_POLYNOMIAL_DEGREE -> bZ
    org.apache.commons.math3.exception.util.LocalizedFormats NON_REAL_FINITE_ABSCISSA -> ca
    org.apache.commons.math3.exception.util.LocalizedFormats NON_REAL_FINITE_ORDINATE -> cb
    org.apache.commons.math3.exception.util.LocalizedFormats NON_REAL_FINITE_WEIGHT -> cc
    org.apache.commons.math3.exception.util.LocalizedFormats NON_SQUARE_MATRIX -> h
    org.apache.commons.math3.exception.util.LocalizedFormats NORM -> cd
    org.apache.commons.math3.exception.util.LocalizedFormats NORMALIZE_INFINITE -> ce
    org.apache.commons.math3.exception.util.LocalizedFormats NORMALIZE_NAN -> cf
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_ADDITION_COMPATIBLE_MATRICES -> cg
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_DECREASING_NUMBER_OF_POINTS -> ch
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_DECREASING_SEQUENCE -> ci
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS -> cj
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION -> ck
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_INCREASING_NUMBER_OF_POINTS -> cl
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_INCREASING_SEQUENCE -> cm
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_MULTIPLICATION_COMPATIBLE_MATRICES -> cn
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_DEFINITE_MATRIX -> co
    org.apache.commons.math3.exception.util.LocalizedFormats NON_POSITIVE_DEFINITE_MATRIX -> cp
    org.apache.commons.math3.exception.util.LocalizedFormats NON_POSITIVE_DEFINITE_OPERATOR -> cq
    org.apache.commons.math3.exception.util.LocalizedFormats NON_SELF_ADJOINT_OPERATOR -> cr
    org.apache.commons.math3.exception.util.LocalizedFormats NON_SQUARE_OPERATOR -> cs
    org.apache.commons.math3.exception.util.LocalizedFormats DEGREES_OF_FREEDOM -> ct
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_DEGREES_OF_FREEDOM -> cu
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_ELEMENT_AT_INDEX -> cv
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_EXPONENT -> cw
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE -> cx
    org.apache.commons.math3.exception.util.LocalizedFormats BASE -> cy
    org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT -> cz
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_LENGTH -> cA
    org.apache.commons.math3.exception.util.LocalizedFormats LENGTH -> cB
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_MEAN -> cC
    org.apache.commons.math3.exception.util.LocalizedFormats MEAN -> cD
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_NUMBER_OF_SAMPLES -> cE
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES -> cF
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_PERMUTATION -> cG
    org.apache.commons.math3.exception.util.LocalizedFormats PERMUTATION_SIZE -> cH
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_POISSON_MEAN -> cI
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_POPULATION_SIZE -> cJ
    org.apache.commons.math3.exception.util.LocalizedFormats POPULATION_SIZE -> cK
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_ROW_DIMENSION -> cL
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_SAMPLE_SIZE -> cM
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_SCALE -> cN
    org.apache.commons.math3.exception.util.LocalizedFormats SCALE -> cO
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_SHAPE -> cP
    org.apache.commons.math3.exception.util.LocalizedFormats SHAPE -> cQ
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_STANDARD_DEVIATION -> cR
    org.apache.commons.math3.exception.util.LocalizedFormats STANDARD_DEVIATION -> cS
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_UPPER_BOUND -> cT
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_WINDOW_SIZE -> cU
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO -> cV
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO_CONSIDER_PADDING -> cW
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO_PLUS_ONE -> cX
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS -> cY
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_STRICTLY_DECREASING_SEQUENCE -> cZ
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_STRICTLY_INCREASING_KNOT_VALUES -> da
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS -> db
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_STRICTLY_INCREASING_SEQUENCE -> dc
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_SUBTRACTION_COMPATIBLE_MATRICES -> dd
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_SUPPORTED_IN_DIMENSION_N -> de
    org.apache.commons.math3.exception.util.LocalizedFormats NOT_SYMMETRIC_MATRIX -> df
    org.apache.commons.math3.exception.util.LocalizedFormats NON_SYMMETRIC_MATRIX -> dg
    org.apache.commons.math3.exception.util.LocalizedFormats NO_BIN_SELECTED -> dh
    org.apache.commons.math3.exception.util.LocalizedFormats NO_CONVERGENCE_WITH_ANY_START_POINT -> di
    org.apache.commons.math3.exception.util.LocalizedFormats NO_DATA -> i
    org.apache.commons.math3.exception.util.LocalizedFormats NO_DEGREES_OF_FREEDOM -> dj
    org.apache.commons.math3.exception.util.LocalizedFormats NO_DENSITY_FOR_THIS_DISTRIBUTION -> dk
    org.apache.commons.math3.exception.util.LocalizedFormats NO_FEASIBLE_SOLUTION -> dl
    org.apache.commons.math3.exception.util.LocalizedFormats NO_OPTIMUM_COMPUTED_YET -> dm
    org.apache.commons.math3.exception.util.LocalizedFormats NO_REGRESSORS -> dn
    org.apache.commons.math3.exception.util.LocalizedFormats NO_RESULT_AVAILABLE -> do
    org.apache.commons.math3.exception.util.LocalizedFormats NO_SUCH_MATRIX_ENTRY -> dp
    org.apache.commons.math3.exception.util.LocalizedFormats NAN_NOT_ALLOWED -> dq
    org.apache.commons.math3.exception.util.LocalizedFormats NULL_NOT_ALLOWED -> j
    org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED -> dr
    org.apache.commons.math3.exception.util.LocalizedFormats COVARIANCE_MATRIX -> ds
    org.apache.commons.math3.exception.util.LocalizedFormats DENOMINATOR -> dt
    org.apache.commons.math3.exception.util.LocalizedFormats DENOMINATOR_FORMAT -> du
    org.apache.commons.math3.exception.util.LocalizedFormats FRACTION -> dv
    org.apache.commons.math3.exception.util.LocalizedFormats FUNCTION -> dw
    org.apache.commons.math3.exception.util.LocalizedFormats IMAGINARY_FORMAT -> dx
    org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY -> dy
    org.apache.commons.math3.exception.util.LocalizedFormats NUMERATOR -> dz
    org.apache.commons.math3.exception.util.LocalizedFormats NUMERATOR_FORMAT -> dA
    org.apache.commons.math3.exception.util.LocalizedFormats OBJECT_TRANSFORMATION -> dB
    org.apache.commons.math3.exception.util.LocalizedFormats REAL_FORMAT -> dC
    org.apache.commons.math3.exception.util.LocalizedFormats WHOLE_FORMAT -> dD
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_TOO_LARGE -> dE
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_TOO_SMALL -> dF
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_TOO_LARGE_BOUND_EXCLUDED -> dG
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_TOO_SMALL_BOUND_EXCLUDED -> dH
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE -> dI
    org.apache.commons.math3.exception.util.LocalizedFormats NUMERATOR_OVERFLOW_AFTER_MULTIPLY -> dJ
    org.apache.commons.math3.exception.util.LocalizedFormats N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED -> dK
    org.apache.commons.math3.exception.util.LocalizedFormats OBSERVED_COUNTS_ALL_ZERO -> dL
    org.apache.commons.math3.exception.util.LocalizedFormats OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY -> dM
    org.apache.commons.math3.exception.util.LocalizedFormats BOBYQA_BOUND_DIFFERENCE_CONDITION -> dN
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUNDS_QUANTILE_VALUE -> dO
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUNDS_CONFIDENCE_LEVEL -> dP
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL -> dQ
    org.apache.commons.math3.exception.util.LocalizedFormats SIGNIFICANCE_LEVEL -> dR
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_ORDER_ABSCISSA_ARRAY -> dS
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_PLANE -> dT
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE_ROOT_OF_UNITY_INDEX -> dU
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE -> dV
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE_SIMPLE -> dW
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE_LEFT -> dX
    org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE_RIGHT -> dY
    org.apache.commons.math3.exception.util.LocalizedFormats OUTLINE_BOUNDARY_LOOP_OPEN -> dZ
    org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW -> ea
    org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_FRACTION -> eb
    org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION -> ec
    org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION -> ed
    org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_MULTIPLICATION -> ee
    org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD -> ef
    org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD -> eg
    org.apache.commons.math3.exception.util.LocalizedFormats PERMUTATION_EXCEEDS_N -> eh
    org.apache.commons.math3.exception.util.LocalizedFormats POLYNOMIAL -> ei
    org.apache.commons.math3.exception.util.LocalizedFormats POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS -> ej
    org.apache.commons.math3.exception.util.LocalizedFormats POPULATION_LIMIT_NOT_POSITIVE -> ek
    org.apache.commons.math3.exception.util.LocalizedFormats POWER_NEGATIVE_PARAMETERS -> el
    org.apache.commons.math3.exception.util.LocalizedFormats PROPAGATION_DIRECTION_MISMATCH -> em
    org.apache.commons.math3.exception.util.LocalizedFormats RANDOMKEY_MUTATION_WRONG_CLASS -> en
    org.apache.commons.math3.exception.util.LocalizedFormats ROOTS_OF_UNITY_NOT_COMPUTED_YET -> eo
    org.apache.commons.math3.exception.util.LocalizedFormats ROTATION_MATRIX_DIMENSIONS -> ep
    org.apache.commons.math3.exception.util.LocalizedFormats ROW_INDEX_OUT_OF_RANGE -> eq
    org.apache.commons.math3.exception.util.LocalizedFormats ROW_INDEX -> k
    org.apache.commons.math3.exception.util.LocalizedFormats SAME_SIGN_AT_ENDPOINTS -> er
    org.apache.commons.math3.exception.util.LocalizedFormats SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE -> es
    org.apache.commons.math3.exception.util.LocalizedFormats SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE -> et
    org.apache.commons.math3.exception.util.LocalizedFormats SIMPLEX_NEED_ONE_POINT -> eu
    org.apache.commons.math3.exception.util.LocalizedFormats SIMPLE_MESSAGE -> ev
    org.apache.commons.math3.exception.util.LocalizedFormats SINGULAR_MATRIX -> l
    org.apache.commons.math3.exception.util.LocalizedFormats SINGULAR_OPERATOR -> ew
    org.apache.commons.math3.exception.util.LocalizedFormats SUBARRAY_ENDS_AFTER_ARRAY_END -> ex
    org.apache.commons.math3.exception.util.LocalizedFormats TOO_LARGE_CUTOFF_SINGULAR_VALUE -> ey
    org.apache.commons.math3.exception.util.LocalizedFormats TOO_LARGE_TOURNAMENT_ARITY -> ez
    org.apache.commons.math3.exception.util.LocalizedFormats TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY -> eA
    org.apache.commons.math3.exception.util.LocalizedFormats TOO_MANY_REGRESSORS -> eB
    org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_COST_RELATIVE_TOLERANCE -> eC
    org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_INTEGRATION_INTERVAL -> eD
    org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_ORTHOGONALITY_TOLERANCE -> eE
    org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE -> eF
    org.apache.commons.math3.exception.util.LocalizedFormats TRUST_REGION_STEP_FAILED -> eG
    org.apache.commons.math3.exception.util.LocalizedFormats TWO_OR_MORE_CATEGORIES_REQUIRED -> eH
    org.apache.commons.math3.exception.util.LocalizedFormats TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED -> eI
    org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH -> eJ
    org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM -> eK
    org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS -> eL
    org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_ORTHOGONOLIZE_MATRIX -> eM
    org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN -> eN
    org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_SOLVE_SINGULAR_PROBLEM -> eO
    org.apache.commons.math3.exception.util.LocalizedFormats UNBOUNDED_SOLUTION -> eP
    org.apache.commons.math3.exception.util.LocalizedFormats UNKNOWN_MODE -> eQ
    org.apache.commons.math3.exception.util.LocalizedFormats UNKNOWN_PARAMETER -> eR
    org.apache.commons.math3.exception.util.LocalizedFormats UNMATCHED_ODE_IN_EXPANDED_SET -> eS
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_PARSE_AS_TYPE -> eT
    org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_PARSE -> eU
    org.apache.commons.math3.exception.util.LocalizedFormats UNPARSEABLE_3D_VECTOR -> eV
    org.apache.commons.math3.exception.util.LocalizedFormats UNPARSEABLE_COMPLEX_NUMBER -> eW
    org.apache.commons.math3.exception.util.LocalizedFormats UNPARSEABLE_REAL_VECTOR -> eX
    org.apache.commons.math3.exception.util.LocalizedFormats UNSUPPORTED_EXPANSION_MODE -> eY
    org.apache.commons.math3.exception.util.LocalizedFormats UNSUPPORTED_OPERATION -> m
    org.apache.commons.math3.exception.util.LocalizedFormats ARITHMETIC_EXCEPTION -> eZ
    org.apache.commons.math3.exception.util.LocalizedFormats ILLEGAL_STATE -> n
    org.apache.commons.math3.exception.util.LocalizedFormats USER_EXCEPTION -> fa
    org.apache.commons.math3.exception.util.LocalizedFormats URL_CONTAINS_NO_DATA -> fb
    org.apache.commons.math3.exception.util.LocalizedFormats VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC -> fc
    org.apache.commons.math3.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH -> fd
    org.apache.commons.math3.exception.util.LocalizedFormats VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT -> fe
    org.apache.commons.math3.exception.util.LocalizedFormats WEIGHT_AT_LEAST_ONE_NON_ZERO -> ff
    org.apache.commons.math3.exception.util.LocalizedFormats WRONG_BLOCK_LENGTH -> fg
    org.apache.commons.math3.exception.util.LocalizedFormats WRONG_NUMBER_OF_POINTS -> fh
    org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS -> fi
    org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR -> fj
    org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR_IN_FRACTION -> fk
    org.apache.commons.math3.exception.util.LocalizedFormats ZERO_FRACTION_TO_DIVIDE_BY -> fl
    org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM -> fm
    org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM_FOR_ROTATION_AXIS -> fn
    org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR -> fo
    org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NOT_ALLOWED -> fp
    java.lang.String sourceFormat -> fq
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String getLocalizedString(java.util.Locale) -> a
    void <clinit>() -> <clinit>
org.apache.commons.math3.linear.AbstractRealMatrix -> org.apache.commons.math3.linear.AbstractRealMatrix:
    org.apache.commons.math3.linear.RealMatrixFormat DEFAULT_FORMAT -> DEFAULT_FORMAT
    void <init>() -> <init>
    double[][] getData() -> getData
    void setSubMatrix(double[][],int,int) -> setSubMatrix
    boolean isSquare() -> isSquare
    int getRowDimension() -> getRowDimension
    int getColumnDimension() -> getColumnDimension
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    double getEntry(int,int) -> getEntry
    void setEntry(int,int,double) -> setEntry
    void <clinit>() -> <clinit>
org.apache.commons.math3.linear.AnyMatrix -> org.apache.commons.math3.linear.a:
    boolean isSquare() -> isSquare
    int getRowDimension() -> getRowDimension
    int getColumnDimension() -> getColumnDimension
org.apache.commons.math3.linear.Array2DRowRealMatrix -> org.apache.commons.math3.linear.Array2DRowRealMatrix:
    double[][] data -> data
    void <init>() -> <init>
    void <init>(double[][]) -> <init>
    double[][] getData() -> getData
    void setSubMatrix(double[][],int,int) -> setSubMatrix
    double getEntry(int,int) -> getEntry
    void setEntry(int,int,double) -> setEntry
    int getRowDimension() -> getRowDimension
    int getColumnDimension() -> getColumnDimension
    double[][] copyOut() -> copyOut
    void copyIn(double[][]) -> copyIn
org.apache.commons.math3.linear.ArrayRealVector -> org.apache.commons.math3.linear.ArrayRealVector:
    org.apache.commons.math3.linear.RealVectorFormat DEFAULT_FORMAT -> DEFAULT_FORMAT
    double[] data -> data
    void <init>() -> <init>
    void <init>(double[]) -> <init>
    void <init>(double[],boolean) -> <init>
    double getEntry(int) -> getEntry
    int getDimension() -> getDimension
    java.lang.String toString() -> toString
    boolean isNaN() -> isNaN
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
org.apache.commons.math3.linear.DecompositionSolver -> org.apache.commons.math3.linear.b:
    org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector) -> solve
org.apache.commons.math3.linear.LUDecomposition -> org.apache.commons.math3.linear.LUDecomposition:
    double[][] lu -> lu
    int[] pivot -> pivot
    boolean even -> even
    boolean singular -> singular
    org.apache.commons.math3.linear.RealMatrix cachedL -> cachedL
    org.apache.commons.math3.linear.RealMatrix cachedU -> cachedU
    org.apache.commons.math3.linear.RealMatrix cachedP -> cachedP
    void <init>(org.apache.commons.math3.linear.RealMatrix) -> <init>
    void <init>(org.apache.commons.math3.linear.RealMatrix,double) -> <init>
    org.apache.commons.math3.linear.DecompositionSolver getSolver() -> getSolver
org.apache.commons.math3.linear.LUDecomposition$1 -> org.apache.commons.math3.linear.c:
org.apache.commons.math3.linear.LUDecomposition$Solver -> org.apache.commons.math3.linear.LUDecomposition$Solver:
    double[][] lu -> lu
    int[] pivot -> pivot
    boolean singular -> singular
    void <init>(double[][],int[],boolean) -> <init>
    org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector) -> solve
    void <init>(double[][],int[],boolean,org.apache.commons.math3.linear.LUDecomposition$1) -> <init>
org.apache.commons.math3.linear.MatrixUtils -> org.apache.commons.math3.linear.d:
    void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int) -> a
    void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int) -> a
    void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int) -> b
    void <clinit>() -> <clinit>
org.apache.commons.math3.linear.NonSquareMatrixException -> org.apache.commons.math3.linear.e:
    void <init>(int,int) -> <init>
org.apache.commons.math3.linear.RealLinearOperator -> org.apache.commons.math3.linear.RealLinearOperator:
    void <init>() -> <init>
org.apache.commons.math3.linear.RealMatrix -> org.apache.commons.math3.linear.f:
    double[][] getData() -> getData
    double getEntry(int,int) -> getEntry
org.apache.commons.math3.linear.RealMatrixFormat -> org.apache.commons.math3.linear.RealMatrixFormat:
    java.lang.String prefix -> prefix
    java.lang.String suffix -> suffix
    java.lang.String rowPrefix -> rowPrefix
    java.lang.String rowSuffix -> rowSuffix
    java.lang.String rowSeparator -> rowSeparator
    java.lang.String columnSeparator -> columnSeparator
    java.text.NumberFormat format -> format
    void <init>() -> <init>
    void <init>(java.text.NumberFormat) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat) -> <init>
    java.text.NumberFormat getFormat() -> getFormat
    org.apache.commons.math3.linear.RealMatrixFormat getInstance() -> getInstance
    org.apache.commons.math3.linear.RealMatrixFormat getInstance(java.util.Locale) -> getInstance
    java.lang.String format(org.apache.commons.math3.linear.RealMatrix) -> format
    java.lang.StringBuffer format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition) -> format
org.apache.commons.math3.linear.RealVector -> org.apache.commons.math3.linear.RealVector:
    void <init>() -> <init>
    int getDimension() -> getDimension
    double getEntry(int) -> getEntry
    boolean isNaN() -> isNaN
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.commons.math3.linear.RealVectorFormat -> org.apache.commons.math3.linear.RealVectorFormat:
    java.lang.String prefix -> prefix
    java.lang.String suffix -> suffix
    java.lang.String separator -> separator
    java.lang.String trimmedPrefix -> trimmedPrefix
    java.lang.String trimmedSuffix -> trimmedSuffix
    java.lang.String trimmedSeparator -> trimmedSeparator
    java.text.NumberFormat format -> format
    void <init>() -> <init>
    void <init>(java.text.NumberFormat) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat) -> <init>
    org.apache.commons.math3.linear.RealVectorFormat getInstance() -> getInstance
    org.apache.commons.math3.linear.RealVectorFormat getInstance(java.util.Locale) -> getInstance
    java.lang.String format(org.apache.commons.math3.linear.RealVector) -> format
    java.lang.StringBuffer format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition) -> format
org.apache.commons.math3.linear.SingularMatrixException -> org.apache.commons.math3.linear.g:
    void <init>() -> <init>
org.apache.commons.math3.util.CompositeFormat -> org.apache.commons.math3.util.CompositeFormat:
    void <init>() -> <init>
    java.text.NumberFormat getDefaultNumberFormat() -> getDefaultNumberFormat
    java.text.NumberFormat getDefaultNumberFormat(java.util.Locale) -> getDefaultNumberFormat
    java.lang.StringBuffer formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition) -> formatDouble
org.apache.commons.math3.util.FastMath -> org.apache.commons.math3.util.FastMath:
    double LOG_MAX_VALUE -> LOG_MAX_VALUE
    double[][] LN_QUICK_COEF -> LN_QUICK_COEF
    double[][] LN_HI_PREC_COEF -> LN_HI_PREC_COEF
    double[] SINE_TABLE_A -> SINE_TABLE_A
    double[] SINE_TABLE_B -> SINE_TABLE_B
    double[] COSINE_TABLE_A -> COSINE_TABLE_A
    double[] COSINE_TABLE_B -> COSINE_TABLE_B
    double[] TANGENT_TABLE_A -> TANGENT_TABLE_A
    double[] TANGENT_TABLE_B -> TANGENT_TABLE_B
    long[] RECIP_2PI -> RECIP_2PI
    long[] PI_O_4_BITS -> PI_O_4_BITS
    double[] EIGHTHS -> EIGHTHS
    double[] CBRTTWO -> CBRTTWO
    void <init>() -> <init>
    double abs(double) -> abs
    void <clinit>() -> <clinit>
org.apache.commons.math3.util.MathUtils -> org.apache.commons.math3.util.MathUtils:
    void <init>() -> <init>
    int hash(double) -> hash
    int hash(double[]) -> hash
    void checkNotNull(java.lang.Object) -> checkNotNull
web_bindings.Serializer -> b.a:
    jugglinglab.protos.PatternOuterClass$Vec3$Builder vec3(double,double,double) -> a
    jugglinglab.protos.PatternOuterClass$Pattern serializePattern(jugglinglab.jml.JMLPattern) -> a
web_bindings.TossPathSerializable -> b.b:
    void <init>() -> <init>
    jugglinglab.protos.PatternOuterClass$Path$Builder serialize(jugglinglab.jml.PathLink) -> a
